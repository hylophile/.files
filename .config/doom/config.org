#+title: Config
#+author: hylo
#+property: header-args:emacs-lisp :tangle yes :results silent

* root

** hi

always forget what this does exactly, but it's Good™
#+begin_src emacs-lisp
;; -*- lexical-binding: t; -*-
(setq lexical-binding t)

(setq byte-compile-warnings nil)
#+end_src
** corfu candidate overlay
#+begin_src emacs-lisp
(use-package! corfu-candidate-overlay
  :after corfu
  :config
  (corfu-candidate-overlay-mode +1)
  (global-set-key (kbd "M-<tab>") #'corfu-candidate-overlay-complete-at-point)
  ;; (global-set-key (kbd "M-<tab>") #'completion-at-point)
  ;; glob
  ;; (global-set-key (kbd "M-<iso-lefttab>") #'corfu-candidate-overlay-complete-at-point)
  ;; (global-set-key (kbd "C-M-S-i") #'corfu-candidate-overlay-complete-at-point)
  )
#+end_src
** completion preview :ARCHIVE:
#+begin_src emacs-lisp :tangle yes
(use-package! completion-preview
  :after corfu
  :hook (corfu-mode . completion-preview-mode)
)
  ;; :config
  ;; (define-key completion-preview-active-mode-map (kbd "<tab>") #'completion-at-point)
  ;; (define-key completion-preview-active-mode-map (kbd "M-<tab>") #'completion-preview-insert))
#+end_src
** vertico
#+begin_src emacs-lisp :tangle yes
(map! :leader "/" #'+vertico/project-search)
(setq tab-always-indent 'complete)

#+end_src
** projectile
#+begin_src emacs-lisp :tangle yes
(setq projectile-project-search-path '("~/code"))

#+end_src
** rg
#+begin_src emacs-lisp :tangle yes

;; (defun my/update-rg-project ()
;;   (when-let*
;;       (((buffer-file-name (current-buffer)))
;;        ((projectile-project-root))
;;        (win (cl-some (lambda (w) (and
;;                                   (string-match-p
;;                                    "^*rg*"
;;                                    (buffer-name (window-buffer w)))
;;                                   w))
;;                      (window-list)))
;;        ((window-live-p win)))
;;     (with-selected-window win
;;         (rg-recompile))))

;; (add-hook 'after-save-hook #'my/update-rg-project)

;; (map! :leader "s P" #'rg-project)

(set-popup-rule! "^\\*rg\\*" :side 'right :width 90)
#+end_src
** time to talk n words
#+begin_src emacs-lisp
;; (custom-set-faces! '(tree-sitter-hl-face:punctuation :background nil))

(defun my/time-to-talk-region (start end)
  (interactive "r")
  (let* ((nwords (count-words start end))
         (wpm 140.0)
         (minutes-float (/ nwords wpm))
         (seconds-total (round (* minutes-float 60)))
         (minutes (/ seconds-total 60))
         (seconds (mod seconds-total 60)))
    (message (format "Words: %d ⸺ Time to talk — %d:%02d" nwords minutes seconds))))
#+end_src
** git auto-commit-mode
#+begin_src emacs-lisp :tangle yes
(use-package! git-auto-commit-mode
  :custom
  (gac-silent-message-p t)
  (gac-debounce-interval 300))

(run-at-time 1 nil #'add-to-list 'safe-local-variable-values '(gac-automatically-push-p . t))
#+end_src

** basics

#+begin_src emacs-lisp

;; (setq doom-localleader-key ",")

;; (remove-hook 'doom-first-buffer-hook 'global-hl-line-mode)
(setq +default-want-RET-continue-comments nil)

;; (add-hook 'minibuffer-setup-hook #'general-override-mode)
;; (add-to-list 'default-frame-alist '(alpha 100 100))
(add-to-list 'default-frame-alist '(alpha-background . 95))
(setq auth-sources '("~/.authinfo"))

;; (setq lsp-idle-delay 0.01)

#+end_src
#+begin_src emacs-lisp


;; (defadvice! hy/keep-point (fun &rest args)
;;   :around #'org-babel-execute-buffer
;;   (let ((p (point)))
;;     (apply fun args)
;;     (goto-char p)))


;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "name"
      user-mail-address "mail")
(setq display-line-numbers-type nil)

(setq which-key-idle-delay 0.3)

(global-visual-line-mode)
#+end_src
#+begin_src emacs-lisp


(setq-default
 delete-by-moving-to-trash t                      ; Delete files to trash
 window-combination-resize t                      ; take new window space from all other windows (not just current)
 x-stretch-cursor t)                              ; Stretch cursor to the glyph width

(setq undo-limit 80000000                         ; Raise undo-limit to 80Mb
      auto-save-default t                         ; Nobody likes to loose work, I certainly don't
      truncate-string-ellipsis "…"                ; Unicode ellispis are nicer than "...", and also save /precious/ space
      password-cache-expiry nil                   ; I can trust my computers ... can't I?
      scroll-preserve-screen-position 'always     ; Don't have `point' jump around
      scroll-margin 5
      hscroll-margin 10)                            ; It's nice to maintain a little margin

(global-subword-mode t)                           ; Iterate through CamelCase words


#+end_src
#+begin_src emacs-lisp


(setq confirm-kill-emacs nil) ; I know what I said.

(setq
 window-divider-default-bottom-width 1
 window-divider-default-right-width 5)

#+end_src

** toggles
#+begin_src emacs-lisp

(add-hook! 'rainbow-mode-hook
  (hl-line-mode (if rainbow-mode -1 +1)))

(map! :leader
      "t n" #'rainbow-mode
      "t t" #'+vterm/toggle
      "t T" #'+vterm/here)
#+end_src
** center all text
#+begin_src emacs-lisp
(use-package! visual-fill-column
  :custom
  (visual-fill-column-center-text t)
  (visual-fill-column-width 100)
  (visual-fill-column-enable-sensible-window-split t)
  :hook
  (prog-mode . visual-fill-column-mode)
  (text-mode . visual-fill-column-mode)
  (special-mode . visual-fill-column-mode))

(map! :after visual-fill-column :leader "t o" #'visual-fill-column-mode)
#+end_src

** dotfiles
A bit of setup for managing a bare dotfile repository.

We check whether the current =default-directory= belongs to our dotfiles with =git ls-files=. If it does, we add our dotfile environment. We also memoize previous calls to =git=, since magit calls =magit-process-environment= quite often (~25 times per =magit-status=), which slows down every =magit=-command with our advice.
#+begin_src emacs-lisp
;; inspired by https://github.com/magit/magit/issues/460#issuecomment-1475082958
(setq hy/dotfile-dirs ())

(defun hy/magit-process-environment (env)
  "Detect and set git -bare repo env vars when in tracked dotfile directories."
  (let* ((git-dir (expand-file-name "~/.dotfiles/"))
         (work-tree (expand-file-name "~/"))
         (default (file-name-as-directory (expand-file-name default-directory))))
    (unless (assoc default hy/dotfile-dirs)
      (push (cons default (eq 0 (call-process "/usr/bin/env" nil nil nil
                                              "git"
                                              (format "--git-dir=%s" git-dir)
                                              (format "--work-tree=%s" work-tree)
                                              "ls-files"
                                              "--error-unmatch"
                                              default)))
            hy/dotfile-dirs))
    (when (cdr-safe (assoc default hy/dotfile-dirs))
      (push (format "GIT_WORK_TREE=%s" work-tree) env)
      (push (format "GIT_DIR=%s" git-dir) env)))
  env)

(advice-add 'magit-process-environment
            :filter-return #'hy/magit-process-environment)
#+end_src

When we want to add a new untracked dotfile in a new directory, we have no way of knowing that it's a dotfile with the above advice. As a workaround, we just stage the file in our dotfiles if there's no =magit-gitdir=, and otherwise fallback to =magit-stage-file= (which otherwise works as expected in known dotfile directories, even for untracked files).
#+begin_src emacs-lisp
(defun hy/magit-stage-file ()
  (interactive)
  (if (magit-gitdir)
      (call-interactively #'magit-stage-file)
    (shell-command (concat
                    "git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME add "
                    (buffer-file-name))
                   t)))

(map! :after magit :leader "g S" #'hy/magit-stage-file)
#+end_src

Prevent projectile from generating a cache for =~= whenever we press =SPC SPC= in
our dotfiles. We call =find-file= instead. There's probably a better solution for
this.
#+begin_src emacs-lisp
(defun hy/projectile-find-file ()
  (interactive)
  (if (equal (expand-file-name "~/") (projectile-project-root))
      (call-interactively #'find-file)
    (projectile-find-file)))

;;(map! :leader "SPC" #'hy/projectile-find-file)
#+end_src
** fonts
#+begin_src emacs-lisp
(setq
 ;; doom-font (font-spec :family "Fira Code" :size 10.0)
 ;; doom-font (font-spec :family "JuliaMono" :size 10.0)
 ;; doom-font (font-spec :family "JuliaMono" :size 10.0)
 ;; doom-font (font-spec :family "JetBrains Mono" :size 11.0)
 ;; doom-font (font-spec :family "DM Mono" :size 11.0)
 ;; doom-font (font-spec :family "Fantasque Sans Mono" :size 13.0)
 ;; doom-font (font-spec :family "Operator Mono" :size 13.0)
 ;; doom-font (font-spec :family "Agave" :size 14.0)
 ;; doom-font (font-spec :family "hylosevka" :size 12.0)
 doom-font (font-spec :family "hylosevka" :size 12.0 :weight 'medium)
 ;; doom-font (font-spec :family "mononoki" :size 12.0)
 ;; doom-font (font-spec :family "Hermit" :size 11.0)
 ;; doom-font (font-spec :family "IBM Plex Mono" :size 10.0)
 ;; doom-font (font-spec :family "Recursive Mono Casual Static" :size 10.0 :weight 'semi-light)
 ;; doom-font (font-spec :family "Victor Mono" :weight 'semi-bold :size 12.0)
 ;; doom-font (font-spec :family "Victor Mono" :size 10.0)
 ;; doom-variable-pitch-font (font-spec :family "JostScaledForEmacs" :size 13.0)
 doom-variable-pitch-font (font-spec :family "Jost" :size 13.0)
 )

;; doom-variable-pitch-font (font-spec :family "Overpass" :size 10.0)


(setq doom-themes-enable-italic t)
(setq doom-font-increment 1)
;; (custom-set-faces! '(font-lock-comment-face :slant italic :family "Victor Mono"))
;; (custom-set-faces! '(font-lock-comment-face :slant italic :family "Operator Mono"))
;; (custom-set-faces! '(font-lock-comment-face :slant italic :weight normal))

;; arnpqeg
;;
(custom-set-faces!
  '(nav-flash-face :inverse-video t :foreground unspecified :background unspecified))
;; (custom-set-faces!
;;   '(nav-flash-face :inherit cursor :foreground unspecified :background unspecified))
;; (custom-set-faces!
;;   '(nav-flash-face :background "#33bfff" :foreground "#0f172a"))
(setq nav-flash-delay 0.3)
#+end_src

** stop emmet
#+begin_src emacs-lisp
(after! emmet-mode
  (map! :map emmet-mode-keymap
        [tab] nil))

;; (after! web-mode
;;   (setq web-mode-script-padding 2))

#+end_src

** recent files cleanup (doesn't work)
#+begin_src emacs-lisp
;; (after! recentf
;;   (add-to-list 'recentf-exclude (abbreviate-file-name (doom-session-file))
;;    (add-to-list 'recentf-exclude (abbreviate-file-name bookmark-default-file))))

;; (delete (doom-session-file) recentf-list)
;; (delete bookmark-default-file recentf-list)
#+end_src

** theme

#+begin_src emacs-lisp


(setq my/theme (let ((output (shell-command-to-string "darkman get")))
                 (if (string= (string-trim-right output) "light")
                         ;; 'ef-tritanopia-light
                         'ef-spring
                   'modus-vivendi)))
;; (setq doom-theme (hylo/random-dark-theme))
(setq doom-theme my/theme)
;; (setq doom-theme 'ef-spring)
;; (setq doom-theme 'doom-dracula)
;; (setq doom-theme 'doom-feather-light)

(use-package! ef-themes)
#+end_src

** repeat
#+begin_src emacs-lisp :tangle yes
(repeat-mode 1)

(setq undo-repeat-map nil)

;; Spawn or hide a which-key popup
(after! which-key
  (defun my/repeat-help (keymap)
    (if keymap
        (run-at-time
         0 nil
         (lambda (keymap)
           (which-key--create-buffer-and-show nil keymap))
         keymap)
      (which-key--hide-popup)))
  (setq repeat-echo-function #'my/repeat-help))
#+end_src
*** isearch
#+begin_src emacs-lisp :tangle yes
(defvar-keymap isearch-repeat-map
  :repeat t
  "s"  #'isearch-repeat-forward
  "r"  #'isearch-repeat-backward)
#+end_src
*** smartparens
#+begin_src emacs-lisp :tangle yes
(defun my/sp-undo ()
  (interactive)
  (undo-fu-only-undo))

(defun my/sp-redo ()
  (interactive)
  (undo-fu-only-redo))

(map! :after smartparens :map smartparens-mode-map "C-M-u" #'sp-backward-up-sexp)

(defvar-keymap structural-edit-map
  :repeat (:exit (ignore))
  "u" #'sp-backward-up-sexp
  "f" #'sp-forward-sexp
  "a" #'sp-beginning-of-sexp
  "e" #'sp-end-of-sexp
  "b" #'sp-backward-sexp
  "d" #'sp-down-sexp
  "k" #'sp-kill-sexp
  "n" #'sp-next-sexp
  "p" #'sp-previous-sexp
  "K" #'sp-kill-hybrid-sexp
  "]" #'sp-forward-slurp-sexp
  "[" #'sp-backward-slurp-sexp
  "}" #'sp-forward-barf-sexp
  "{" #'sp-backward-barf-sexp
  "C" #'sp-convolute-sexp
  "J" #'sp-join-sexp
  "t" #'sp-transpose-sexps
  "S" #'sp-split-sexp
  "R" #'sp-raise-sexp
  "/" #'my/sp-undo
  "?" #'my/sp-redo
  "x" #'eval-defun
  "q" #'ignore
  "<escape>" #'ignore
  "<backspace>" #'sp-splice-sexp)
#+end_src
*** bookmarks
#+begin_src emacs-lisp :tangle yes
;; SPC i m => insert bookmark
;; SPC s m => goto bookmark
(map! :map doom-leader-insert-map "m" #'bookmark-set-no-overwrite)
#+end_src

** avy

#+begin_src emacs-lisp
(use-package! avy
  :config
  (setq avy-timeout-seconds 0.3)
  (setq avy-all-windows 'all-frames))
(defun avy-goto-char-3 (char1 char2 char3 &optional arg beg end)
  "Jump to the currently visible CHAR1 followed by CHAR2 followed by
CHAR3. The window scope is determined by `avy-all-windows'. When
ARG is non-nil, do the opposite of `avy-all-windows'. BEG and END
narrow the scope where candidates are searched."
  (interactive (list (let ((c1 (read-char "char 1: " t)))
                       (if (memq c1 '(? ?\b))
                           (keyboard-quit)
                         c1))
                     (let ((c2 (read-char "char 2: " t)))
                       (cond ((eq c2 8)
                              (keyboard-quit))
                             ((memq c2 avy-del-last-char-by)
                              (keyboard-escape-quit))
                             (t
                              c2)))
                     (let ((c3 (read-char "char 3: " t)))
                       (cond ((eq c3 8)
                              (keyboard-quit))
                             ((memq c3 avy-del-last-char-by)
                              (keyboard-escape-quit)
                              (call-interactively 'avy-goto-char-3))
                             (t
                              c3)))
                     current-prefix-arg
                     nil nil))
  (when (eq char1 13)
    (setq char1 ?\n))
  (when (eq char2 13)
    (setq char2 ?\n))
  (when (eq char3 13)
    (setq char3 ?\n))
  (avy-with avy-goto-char-3
    (avy-jump
     (regexp-quote (string char1 char2 char3))
     :window-flip arg
     :beg beg
     :end end)))

(defun avy-action-lookup-documentation (pt)
  (save-excursion
    (goto-char pt)
    (+lookup/documentation (doom-thing-at-point-or-region))))

(defun avy-action-helpful (pt)
  (save-excursion
    (goto-char pt)
    (helpful-at-point))
  (select-window
   (cdr (ring-ref avy-ring 0)))
  t)

(defun avy-action-copy-whole-line (pt)
  (save-excursion
    (goto-char pt)
    (cl-destructuring-bind (start . end)
        (bounds-of-thing-at-point 'line)
      (copy-region-as-kill start end)))
  (select-window
   (cdr
    (ring-ref avy-ring 0)))
  t)

(defun avy-action-yank-whole-line (pt)
  (avy-action-copy-whole-line pt)
  (save-excursion (yank))
  t)


(defun avy-action-kill-whole-line (pt)
  (save-excursion
    (goto-char pt)
    (kill-whole-line))
  (select-window
   (cdr
    (ring-ref avy-ring 0)))
  t)

(defun avy-action-teleport-whole-line (pt)
  (avy-action-kill-whole-line pt)
  (save-excursion (yank)) t)

(defun avy-action-embark (pt)
  (unwind-protect
      (save-excursion
        (goto-char pt)
        (embark-act))
    (select-window
     (cdr (ring-ref avy-ring 0))))
  t)


(defun avy-action-push (pt)
  (unwind-protect
      (kill-region (region-beginning) (region-end))
    (deactivate-mark)
    (save-excursion
      (goto-char pt)
      (yank))
    (select-window
     (cdr (ring-ref avy-ring 0))))
  t)

(defun avy-action-exchange (pt)
  "Exchange sexp at PT with the one at point."
  (save-excursion
    (set-mark pt)
    (transpose-sexps 0)))

(defun avy-action-easy-kill-any (pt)
  (unless (require 'easy-kill nil t)
    (user-error "Easy Kill not found, please install."))
  (cl-letf* ((bounds (if (use-region-p)
                         (prog1 (cons (region-beginning) (region-end))
                           (deactivate-mark))
                       (bounds-of-thing-at-point 'sexp)))
             (transpose-map
              (define-keymap
                "M-t" (lambda () (interactive "*")
                        (pcase-let ((`(,beg . ,end) (easy-kill--bounds)))
                          (transpose-regions (car bounds) (cdr bounds) beg end
                                             'leave-markers)))))
             ((symbol-function 'easy-kill-activate-keymap)
              (lambda ()
                (let ((map (easy-kill-map)))
                  (set-transient-map
                   (make-composed-keymap transpose-map map)
                   (lambda ()
                     ;; Prevent any error from activating the keymap forever.
                     (condition-case err
                         (or (and (not (easy-kill-exit-p this-command))
                                  (or (eq this-command
                                          (lookup-key map (this-single-command-keys)))
                                      (let ((cmd (key-binding
                                                  (this-single-command-keys) nil t)))
                                        (command-remapping cmd nil (list map)))))
                             (ignore
                              (easy-kill-destroy-candidate)
                              (unless (or (easy-kill-get mark) (easy-kill-exit-p this-command))
                                (easy-kill-save-candidate))))
                       (error (message "%s:%s" this-command (error-message-string err))
                              nil)))
                   (lambda ()
                     (let ((dat (ring-ref avy-ring 0)))
                       (select-frame-set-input-focus
                        (window-frame (cdr dat)))
                       (select-window (cdr dat))
                       (goto-char (car dat)))))))))
    (goto-char pt)
    (easy-kill)))


(setq avy-keys '(?n ?s ?e ?r ?i ?a ?o ?d ?m ?g))
(setq avy-dispatch-alist
      '((?h . avy-action-lookup-documentation)
        (?H . avy-action-helpful)
        (?k . avy-action-kill-stay)
        (?K . avy-action-kill-whole-line)
        (?q . avy-action-easy-copy)
        (?m . avy-action-mark)
        ;; (?p . avy-action-push)
        (?t . avy-action-exchange)
        (?T . avy-action-easy-kill-any)
        (?l . avy-action-teleport)           ; pull
        (?L . avy-action-teleport-whole-line)
        (?w . avy-action-copy)
        (?W . avy-action-copy-whole-line)
        (?y . avy-action-yank)
        (?Y . avy-action-yank-whole-line)
        (?. . avy-action-embark)))

(global-set-key (kbd "M-j") #'avy-goto-char-3)
(global-set-key [remap kill-ring-save] 'easy-kill)
#+end_src

** popup
#+begin_src emacs-lisp
(defun my/select-orig (popup orig)
  (run-at-time 0 nil `(lambda () (select-window ,orig t))))

;; (set-popup-rule! "^\\*lsp-help\\*" :side 'bottom)
(plist-put +popup-defaults :side 'right)
(plist-put +popup-defaults :width 82)

;; (set-popup-rule! "^\\*lsp-help\\*" :side 'right :width 82 :vslot 1)
(set-popup-rule! "^\\*Help\\*" :side 'right :width 82 :vslot 1)
(set-popup-rule! "^\\*helpful" :side 'right :width 82 :vslot 1 :select
  (lambda (popup orig)
    (run-at-time nil nil `(lambda () (select-window ,orig)))))
(set-popup-rules!
  '(("^\\*info\\*"
     :slot 2 :vslot -2 :side left :width 83 :quit nil)))

(set-popup-rule! "^\\*Flycheck errors\\*$" :quit nil)
;; (set-popup-rule! "^\\*helpful" :select nil)
;; (setq +popup-defaults (list :side 'right :height 0.16 :width 80 :quit t :select #'ignore :ttl 5))
;; (set-popup-rule! :side 'bottom :height 0.16 :width 40 :quit t :select #'5 :ignore ttl)
;; (set-popup-rule! "^\\*Org Src" :side 'right :size 0.4 :quit nil :vslot -1)
(after! org
  (set-popup-rule! "^\\*Calendar" :side 'bottom)
  (set-popup-rule! "^\\*Org Src" :ignore t))
;; (set-popup-rule! "^\\*Org Src" :side 'right :size 0.31 :quit nil :select t :autosave t :modeline t :ttl nil))
#+end_src
** misc

#+begin_src emacs-lisp

;;
;; (setq +doom-dashboard-functions (append
;;                                  (list (car +doom-dashboard-functions))
;;                                  '(hylo/insert-theme)
;;                                  (cdr +doom-dashboard-functions)))

(setq doom-themes-treemacs-theme "doom-colors")

#+end_src
** vterm
#+begin_src emacs-lisp
(setq vterm-always-compile-module t)
#+end_src
** host macros
#+begin_src emacs-lisp

(defmacro nsa! (&rest body)
  `(when (string= "nsa" (system-name)) ,@body))

(defmacro rook! (&rest body)
  `(when (string= "rook" (system-name)) ,@body))
(nsa!
 (load! "load/work.el" nil t))

#+end_src
** embark
#+begin_src emacs-lisp
;; (map! :map embark-general-map "e" #'+vertico/embark-export-write)
(map! :nv "C-." #'embark-act)
(map! [remap describe-bindings] #'embark-bindings
      "C-."               #'embark-act
      ;; :desc "Export to writable buffer" "C-. C-e" #'+vertico/embark-export-write
      (:map minibuffer-local-map
            "C-."               #'embark-act
            "C-c C-."           #'embark-export))
#+end_src
** latex
#+begin_src emacs-lisp
(after! latex
  (add-to-list 'TeX-command-list '("XeLaTeX" "%`xelatex%(mode)%' %t" TeX-run-TeX nil t)))
(setq +latex-viewers '(zathura pdf-tools evince okular skim sumatrapdf))

(map! :map cdlatex-mode-map "'" nil)

#+end_src
** misc settings
#+begin_src emacs-lisp
(setq doom-modeline-vcs-max-length 30)

(remove-hook! 'doom-modeline-mode-hook #'size-indication-mode)


#+end_src

*** misc

#+begin_src emacs-lisp

(use-package! page-break-lines
  :hook
  (emacs-lisp-mode . page-break-lines-mode))

(map! :leader :desc "Undo tree" :n "U" #'vundo)
(after! vundo
  (map! :map vundo-mode-map "<escape>" #'vundo-quit)
  (setq vundo-glyph-alist vundo-unicode-symbols))

(defun rename-buffers-with-annoying-names ()
  (when (member (buffer-name) '("index.ts" "package.json"))
    (when (string-match "[^/]+/[^/]+$" (buffer-file-name))
      (rename-buffer (match-string 0 (buffer-file-name)) t))))

;; (add-hook 'change-major-mode-hook #'rename-buffers-with-annoying-names)


#+end_src

** eldoc-box
#+begin_src emacs-lisp
(use-package! eldoc-box
  :hook
  (eldoc-mode . eldoc-box-hover-mode)
  :config


  (push '(tab-bar-format . 0) eldoc-box-frame-parameters)
  (push '(tab-bar-lines . 0) eldoc-box-frame-parameters)
  (push '(alpha-background . 100) eldoc-box-frame-parameters)

  (push '(child-frame-border-width . 3) eldoc-box-frame-parameters)
  (push '(tab-bar-lines-keep-state . 0) eldoc-box-frame-parameters)

  (defun my/eldoc-box--window-side ()
    "Return the side of the selected window.
Symbol 'left if the selected window is on the left,'right if on the right.
Return 'left if there is only one window."
    (let ((left-window (window-at 50 50)))
      (if (eq left-window (selected-window))
          'left
        'right)))

  (defun my/eldoc-box--default-upper-corner-position-function (width height)
    "The default function to set childframe position.
Used by `eldoc-box-position-function'.
Position is calculated base on WIDTH and HEIGHT of childframe text window"
    ;; (cons (- (frame-outer-width (selected-frame)) width 40) 100))
    ;; (message (format "width: %s" width))
    (pcase-let ((`(,offset-l ,offset-r ,offset-t) eldoc-box-offset))
      (cons (pcase (my/eldoc-box--window-side) ; x position + offset
              ;; display doc on right
              ('left (- (frame-outer-width (selected-frame)) width 15))
              ;; display doc on left
              ('right offset-l))
            ;; y position + v-offset
            5)))
  ;; (- (frame-outer-height (selected-frame)) height 120))))

  (setq eldoc-box-position-function #'my/eldoc-box--default-upper-corner-position-function))
(custom-set-faces! `(eldoc-box-border :background ,(doom-color 'grey)))
;; (custom-set-faces! `(eldoc-box-border :background ,(face-attribute 'solaire-default-face :background))))

#+end_src
** flycheck

#+begin_src emacs-lisp

(after! flycheck
  (define-fringe-bitmap 'flycheck-fringe-bitmap-double-arrow-hi-res [224]
    nil nil '(center repeated))
  (define-fringe-bitmap 'flycheck-fringe-bitmap-double-arrow [224]
    nil nil '(center repeated)))

#+end_src

** maps

#+begin_src emacs-lisp
(map! "C-+" #'doom/increase-font-size
      "C-=" #'doom/reset-font-size
      "C--" #'doom/decrease-font-size)

(map! :leader "," #'consult-buffer)

(add-hook 'helpful-mode-hook 'mixed-pitch-mode)


#+end_src

** org-mode
*** 772
#+begin_src emacs-lisp
(setq org-directory "~/org/")

;; better scaling for mixed-pitch-mode
(setq! face-font-rescale-alist '(("Jost" . 1.2)))

(defvar org-refile-region-format "\n%s\n")

(defvar org-refile-region-position 'bottom
  "Where to refile a region. Use 'bottom to refile at the
end of the subtree. ")

(after! org
  (define-key org-mode-map (kbd "C-,") #'er/expand-region))


(defun org-refile-region (beg end copy)
  "Refile the active region.
If no region is active, refile the current paragraph.
With prefix arg C-u, copy region instad of killing it."
  (interactive "r\nP")
  ;; mark paragraph if no region is set
  (unless (use-region-p)
    (setq beg (save-excursion
                (backward-paragraph)
                (skip-chars-forward "\n\t ")
                (point))
          end (save-excursion
                (forward-paragraph)
                (skip-chars-backward "\n\t ")
                (point))))
  (let* ((target (save-excursion (org-refile-get-location)))
         (file (nth 1 target))
         (pos (nth 3 target))
         (text (buffer-substring-no-properties beg end)))
    (unless copy (kill-region beg end))
    (deactivate-mark)
    (with-current-buffer (find-file-noselect file)
      (save-excursion
        (goto-char pos)
        (if (eql org-refile-region-position 'bottom)
            (org-end-of-subtree)
          (org-end-of-meta-data))
        (insert (format org-refile-region-format text))))))


;;(map! :map org-mode-map
;;      :localleader
;;      (:prefix ("SzzPCaa" . "mine")
;;      ;; "r" #'org-refile-region ; bugged
;;      "d" (cmd! (org-todo "DONE"))
;;      "D" #'org-archive-done-tasks))

(remove-hook 'org-mode-hook #'doom-disable-show-paren-mode-h)

(setq org-agenda-mouse-1-follows-link t)
(setq org-tags-column 0)
(setq org-agenda-tags-column 0)

#+end_src
 
*** 830
#+begin_src emacs-lisp
;; (setq org-agenda-files (directory-files-recursively "~/org/" "\.org$"))
(setq org-agenda-files '("~/org" "~/org/issues"))


(setq org-agenda-format-date (lambda (date) (concat "\n"
                                                    (org-agenda-format-date-aligned date))))

(after! org
  (setq org-agenda-start-day "0d"
        org-agenda-skip-deadline-if-done t
        org-agenda-skip-scheduled-if-done t
        org-agenda-skip-timestamp-if-done t))



(custom-set-faces!
  '(org-document-title :height 1.1))
;; (custom-set-faces!
;;   `(org-agenda-diary :foreground ,(doom-color 'magenta) :weight bold))


#+end_src
*** 854
#+begin_src emacs-lisp


(after! doom-themes
  (custom-set-faces!
    '(outline-1 :weight semi-bold :height 1.15)
    '(outline-2 :weight semi-bold :height 1.10)
    '(outline-3 :weight semi-bold :height 1.09)
    '(outline-4 :weight semi-bold :height 1.06)
    '(outline-5 :weight semi-bold :height 1.03)
    '(outline-6 :weight semi-bold :height 1.00)
    '(outline-7 :weight semi-bold :height 1.00)
    '(outline-8 :weight semi-bold)
    '(outline-9 :weight semi-bold)))



(map! :localleader :map org-mode-map "~" (cmd! (org-toggle-checkbox '(16))))


#+end_src
*** 876
#+begin_src emacs-lisp
(defadvice! my/hide-archived-on-global-cycle (&rest _)
  "For some reason org-content (i.e. <number>S-<TAB>) does not
respect the hidden status of archived headings and shows them.
This hides them again."
  :after #'org-content
  (org-fold-hide-archived-subtrees (point-min) (point-max)))


(setq org-archive-location "~/org/archive/%s_archive::")

;; (add-hook 'org-cycle (cmd! (org-hide-archived-subtrees (point-min) (point-max))))

(setq org-agenda-format-date (lambda (date) (concat "\n"
                                                    (make-string (window-width) 9472)
                                                    "\n"
                                                    (org-agenda-format-date-aligned date))))

#+end_src
*** 899 :ARCHIVE:
#+begin_src emacs-lisp
(use-package! org-roam
  :config
  (setq org-roam-capture-last-used-template "d")
  (defadvice! hy/after-roam-capture (&optional GOTO KEYS &key FILTER-FN TEMPLATES INFO)
    :after #'org-roam-capture
    (message KEYS)
    (setq org-roam-capture-last-used-template KEYS))
  (defun hylo/org-roam-capture-last-used-template ()
    (interactive)
    (org-roam-capture :keys org-roam-capture-last-used-template))
  :custom
  (org-roam-capture-templates
   '(("d" "default" plain "%?" :target
      (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
      :unnarrowed t)
     ("u" "Uni related note")
     ("ua" "Algorithmic Game Theory" plain (file "~/org/roam/templates/agt.org")
      :if-new (file+head "%<%Y%m%d%H%M%S>-uni-agt-${slug}.org" "#+title: ${title}\n")
      :unnarrowed t)
     ("uw" "Web technologies" plain (file "~/org/roam/templates/wt.org")
      :if-new (file+head "%<%Y%m%d%H%M%S>-uni-wt-${slug}.org" "#+title: ${title}\n")
      :unnarrowed t)
     ("um" "Machine Learning" plain (file "~/org/roam/templates/ml.org")
      :if-new (file+head "%<%Y%m%d%H%M%S>-uni-ml-${slug}.org" "#+title: ${title}\n")
      :unnarrowed t)
     ("ug" "Computer Graphics" plain (file "~/org/roam/templates/cg.org")
      :if-new (file+head "%<%Y%m%d%H%M%S>-uni-cg-${slug}.org" "#+title: ${title}\n")
      :unnarrowed t))))

;; (after! org-fold-core
;;   (setq org-fold-core-style 'overlays))

;; ;; (after! org
;;   (push "notes" org-protecting-blocks)
;;   (push "comment" org-protecting-blocks))




;; (use-package! websocket
;;   :after org-roam)



;;(use-package! org-roam-ui
;;  :after org-roam ;; or :after org
;;  ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
;;  ;;         a hookable mode anymore, you're advised to pick something yourself
;;  ;;         if you don't care about startup time, use
;;  ;;  :hook (after-init . org-roam-ui-mode)
;;  :config
;;  (setq org-roam-ui-sync-theme t
;;        org-roam-ui-follow t
;;        org-roam-ui-update-on-save t
;;        org-roam-ui-open-on-start t))






#+end_src
*** 966
#+begin_src emacs-lisp

(setq
 org-hide-emphasis-markers t
 org-pretty-entities t
 org-ellipsis "…")

(defun my/org-fmt ()
  "Ensure that blank lines exist between headings of level (n+1) which are followed by headings of level (n)."
  (interactive)
  (org-map-entries (lambda ()

                     (org-with-wide-buffer
                      (let ((current-level (org-current-level))
                            (next-level (progn
                                          (ignore-errors (outline-next-heading))
                                          (org-current-level))))
                        (when (and (< next-level current-level)
                                   (not (looking-back "\n\n" nil)))
                          (insert "\n")))))))

#+end_src
*** 983
#+begin_src emacs-lisp

(use-package! org-appear
  :hook (org-mode . org-appear-mode)
  :config
  (setq org-appear-autoemphasis t
        org-appear-autosubmarkers t
        org-appear-autolinks nil)
  ;; for proper first-time setup, `org-appear--set-elements'
  ;; needs to be run after other hooks have acted.
  (run-at-time nil nil #'org-appear--set-elements))

#+end_src
*** 997
#+begin_src emacs-lisp

(defun org-archive-done-tasks ()
  (interactive)
  (mapc (lambda(entry)
          (goto-char entry)
          (org-archive-subtree))
        (reverse (org-map-entries (lambda () (point)) "TODO=\"DONE\"" 'file))))




(setq org-agenda-include-diary t
      holiday-bahai-holidays nil
      holiday-hebrew-holidays nil
      holiday-islamic-holidays nil
      holiday-oriental-holidays nil)

(setq solar-n-hemi-seasons
      '("Frühlingsanfang" "Sommeranfang" "Herbstanfang" "Winteranfang"))

(setq holiday-general-holidays
      '((holiday-fixed 1 1 "Neujahr")
        (holiday-fixed 5 1 "Tag der Arbeit")
        (holiday-fixed 3 8 "Internationaler Frauentag")
        (holiday-fixed 10 3 "Tag der Deutschen Einheit")))

#+end_src
*** 1027
#+begin_src emacs-lisp

(setq holiday-christian-holidays
      '((holiday-float 12 0 -4 "1. Advent" 24)
        (holiday-float 12 0 -3 "2. Advent" 24)
        (holiday-float 12 0 -2 "3. Advent" 24)
        (holiday-float 12 0 -1 "4. Advent" 24)
        (holiday-fixed 12 25 "1. Weihnachtstag")
        (holiday-fixed 12 26 "2. Weihnachtstag")
        (holiday-easter-etc  -2 "Karfreitag")
        (holiday-easter-etc   0 "Ostersonntag")
        (holiday-easter-etc  +1 "Ostermontag")
        (holiday-easter-etc +39 "Christi Himmelfahrt")
        (holiday-easter-etc +49 "Pfingstsonntag")
        (holiday-easter-etc +50 "Pfingstmontag")))
(setq org-agenda-show-outline-path t)
(setq org-agenda-time-grid nil)
(setq org-agenda-show-current-time-in-grid nil)
;; (setq org-agenda-prefix-format "%i  %?-12t% s")
(setq org-agenda-prefix-format "  %i  %-12t% s")

(after! org-agenda
  (org-super-agenda-mode))

;; (setq org-superstar-headline-bullets-list "•");"●⚬")
(setq org-superstar-headline-bullets-list "❥⚘❥❦❥✿");"●⚬")

(use-package! mixed-pitch
  :hook
  (org-mode . mixed-pitch-mode)
  :config
  (add-to-list 'mixed-pitch-fixed-pitch-faces 'corfu-default))


(setq org-use-speed-commands t)
#+end_src

*** org super agenda
#+begin_src emacs-lisp
(use-package! org-super-agenda
  :commands org-super-agenda-mode
  :config
  (setq org-super-agenda-groups '(
                                  (:name "Plan"
                                   :time-grid t)

                                  (:name "Important"
                                   :priority>= "C")
                                  (:name "Scheduled"
                                   :scheduled t)
                                  (:name "Uni"
                                   ;; :face (:foreground ,(doom-color 'blue))
                                   :tag "uni")
                                  (:name "Health" :tag "health")
                                  (:name "Hobby" :tag "tech" :tag "emacs")
                                  (:name "Buy" :tag "buy")
                                  (:category "Diary" :name "Diary")
                                  (:name "Work"  ; Optionally specify section name
                                   ;; :face (:foreground ,(doom-color 'green))
                                   :order 99
                                   :tag "work"
                                   :category "work")
                                  ;; :and (:tag "work" :time-grid t))

                                  (:name "Other" :anything t))))



#+end_src
#+begin_src emacs-lisp
(setq org-agenda-custom-commands
      '(("n" "3 days and todos"
         ((agenda "" ((org-agenda-span 3)))
          (alltodo "" ((org-agenda-overriding-header "")))))))

(defadvice! my/alltodo-without-time-grid (fn &optional arg)
  "the org-super-agenda selector :time-grid t collects all TODO
items in the alltodo agenda, so we dynamically remove it when using that."
  :around #'org-todo-list
  (let ((org-super-agenda-groups (cdr org-super-agenda-groups)))
    (apply fn arg)))



(setq org-agenda-category-icon-alist
      `(
        ("uni" (#("🌳")) nil nil :ascent center)
        ;; ("work" ,(list (all-the-icons-material "work" :height 1.2 :face 'all-the-icons-green)) nil nil :ascent center)
        ("work" (#("🌸")) nil nil :ascent center)
        ("buy" (#("🪙")) nil nil :ascent center)
        ("health" (#("💊")) nil nil :ascent center)
        ("tech" (#("🦄")) nil nil :ascent center)
        ("emacs" (#("🎹")) nil nil :ascent center)
        ("chore" (#("🔱")) nil nil :ascent center)
        ;; ("" ,(list (all-the-icons-faicon "pencil" :height 1.2)) nil nil :ascent center)
        ("inbox" (#("🌊")) nil nil :ascent center)
        ("" (#("🌈")) nil nil :ascent center)))

#+end_src

*** calendar
#+begin_src emacs-lisp
(setq calendar-week-start-day 1)
#+end_src

*** org-modern
#+begin_src emacs-lisp
(use-package! org-modern
  :custom
  (org-modern-star '("❥" "⚘" "❥" "❦" "❥" "✿"))
  (org-modern-table nil)
  :hook
  (org-mode . org-modern-mode)
  (org-agenda-finalize . org-modern-agenda))

#+end_src

*** org-timeblock
#+begin_src emacs-lisp
(setq org-file-tags '("todo"))

(use-package! org-timeblock
  :custom
  (org-timeblock-n-days-view 4)
  (org-timeblock-current-time-indicator t)
  (org-timeblock-show-outline-path t)
  (org-timeblock-scale-options nil)
  (org-timeblock-scale-options '(8 . 20))
  (org-timeblock-tag-colors
   '(("@uni" "#9bf6ff" "")
     ("zoom" "#caffbf")
     ("homework" "#bdb2ff")
     ("work" "#ffc6ff")
     ("todo" "#ffadad"))))
;; "#ffadad";
;; "#ffd6a5";
;; "#fdffb6";
;; "#caffbf";
;; "#9bf6ff";
;; "#a0c4ff";
;; "#bdb2ff";
;; "#ffc6ff";
;; "#fffffc")
                                        ;

#+end_src

*** org-latex-preview
#+begin_src emacs-lisp :tangle yes
(use-package org-latex-preview
  :config
  ;; Increase preview width
  (plist-put org-latex-preview-appearance-options
             :zoom 1.25)
  ;; Turn on auto-mode, it's built into Org and much faster/more featured than
  ;; org-fragtog. (Remember to turn off/uninstall org-fragtog.)
  (add-hook 'org-mode-hook 'org-latex-preview-auto-mode)

  ;; Block C-n and C-p from opening up previews when using auto-mode
  (add-hook 'org-latex-preview-auto-ignored-commands 'next-line)
  (add-hook 'org-latex-preview-auto-ignored-commands 'previous-line)

  (add-to-list 'org-latex-packages-alist '("" "amssymb"))
  ;; Bonus: Turn on live previews.  This shows you a live preview of a LaTeX
  ;; fragment and updates the preview in real-time as you edit it.
  ;; To preview only environments, set it to '(block edit-special) instead
  (setq org-latex-preview-live t))
#+end_src
*** org subscript fix
#+begin_src emacs-lisp :tangle yes
(defun my/org-raise-scripts-no-braces (_)
  (when (and (eq (char-after (match-beginning 3)) ?{)
             (eq (char-before (match-end 3)) ?}))
    (remove-text-properties (match-beginning 3) (1+ (match-beginning 3))
                    (list 'invisible nil))
    (remove-text-properties (1- (match-end 3)) (match-end 3)
                    (list 'invisible nil))))

(advice-add 'org-raise-scripts :after #'my/org-raise-scripts-no-braces)
#+end_src
** lsp

#+begin_src emacs-lisp
(use-package lsp-mode
  :custom
  (lsp-completion-provider :none) ;; we use Corfu!
  :init
  (defun my/lsp-mode-setup-completion ()
    (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
          '(flex))) ;; Configure flex
  :hook
  (lsp-mode . lsp-headerline-breadcrumb-mode)
  (lsp-completion-mode . my/lsp-mode-setup-completion))

(defun my/lsp-no-code-actions ()
  (setq lsp-ui-sideline-show-code-actions nil))
(add-hook 'lsp-after-initialize-hook #'my/lsp-no-code-actions)

;; (with-eval-after-load 'lsp-volar
;;   (setq lsp-typescript-tsdk (file-name-directory (lsp-volar-get-typescript-server-path))))

(setq +format-with-lsp nil)
(after! lsp-ui
  (setq lsp-ui-sideline-enable nil  ; no more useful than flycheck
        lsp-ui-doc-enable nil
        lsp-eldoc-render-all t))


#+end_src
** insert primary
#+begin_src emacs-lisp :tangle yes
(defun insert-primary ()
  (interactive)
  (insert-for-yank (gui-get-primary-selection)))

(global-set-key (kbd "<f2>") #'insert-primary)

#+end_src
** scheme
#+begin_src emacs-lisp
(set-popup-rule! "^\\*Geiser Debug\\*$" :side 'bottom :vslot -3)
(set-popup-rule! "^\\*Geiser Documentation\\*$" :side 'bottom :vslot -3)

;; (map! :map geiser-debug-mode-map "," #'geiser-guile-debug-menu)

(after! (evil geiser)
  (evil-set-initial-state 'geiser-debug-mode 'emacs))

(after! scheme
  (setq geiser-mode-start-repl-p t))
#+end_src
** ediff
#+begin_src emacs-lisp
(after! ediff
(defun ediff-copy-both-to-C ()
  (interactive)
  (ediff-copy-diff ediff-current-difference nil 'C nil
                   (concat
                    (ediff-get-region-contents ediff-current-difference 'A ediff-control-buffer)
                    (ediff-get-region-contents ediff-current-difference 'B ediff-control-buffer))))
(defun add-d-to-ediff-mode-map () (define-key ediff-mode-map "f" 'ediff-copy-both-to-C))
(add-hook 'ediff-keymap-setup-hook 'add-d-to-ediff-mode-map)
)
#+end_src

** ace-window

#+begin_src emacs-lisp

(map! :leader
      "a" #'ace-window)
(defun split-window-right-and-focus ()
  "Split window to the right and focus the new window."
  (interactive)
  (split-window-right)
  (other-window 1))
(defun split-window-below-and-focus ()
  "Split window to the right and focus the new window."
  (interactive)
  (split-window-below)
  (other-window 1))

(defun hylo/split-window-fair-and-follow ()
  "Split current window vertically or horizontally, based on its
 current dimensions. Use evil's window splitting function to
 follow into the new window."
  (let* ((window (selected-window))
         (w (window-body-width window))
         (h (window-body-height window)))
    (if (< (* h 2.2) w)
        (split-window-right-and-focus)
      (split-window-below-and-focus))))

(map! :map evil-window-map "s" #'hylo/split-window-fair-and-follow)


(custom-set-faces!
  `(aw-leading-char-face
    ;; :family "Jost*"
    :foreground ,(face-attribute 'mode-line-emphasis :foreground)
    ;; :foreground ,(doom-color 'red)
    ;; :background ,(face-attribute 'solaire-default-face :background)
    ;; :width ultra-expanded
    ;; :weight light
    :height 5.0))
;; :weight bold :height 2.0 :box (:line-width (5 . 5) :color ,(face-attribute 'mode-line :background))))
(use-package! ace-window
  :config
  (setq aw-scope 'visible)
  (setq aw-dispatch-always t)
  (when (display-graphic-p)
   (ace-window-posframe-mode +1))
  (after! treemacs
    (setq aw-ignored-buffers (delete 'treemacs-mode aw-ignored-buffers)))
  (ace-window-display-mode t)
  (setq aw-background nil)
  (setq aw-keys '(?t ?n ?e ?r ?i ?o ?d ?f ?u ?p ?l ?w ?y ?c ?, ?x ?. ?g ?m))

  (defun delete-selected-window ()
    (delete-window (selected-window)))


  (setq aw-dispatch-alist
        ;; no docstring means dont prompt for window, use current (weird but ok)
        '((?k aw-delete-window "Delete Window")
          (?K delete-selected-window)
          (?m aw-move-window "Move Window")
          (?M delete-other-windows)
          (?c aw-copy-window "Copy Window")
          (?b aw-switch-buffer-in-window "Select Buffer")
          (?a aw-flip-window)
          (?B aw-switch-buffer-other-window "Switch Buffer Other Window")
          (?s hylo/split-window-fair-and-follow)
          (?S aw-swap-window "Swap Windows")
          (?u winner-undo)
          (?R +popup/raise "Raise Window")
          ;; (?v aw-split-window-vert "Split Vert Window")
          ;; (?h aw-split-window-horz "Split Horz Window")
          (?v split-window-below-and-focus)
          (?h split-window-right-and-focus)

          (?? aw-show-dispatch-help))))
#+end_src


** meow
#+begin_src emacs-lisp

(defun meow-setup ()
  (setq meow-cheatsheet-layout meow-cheatsheet-layout-colemak-dh)
  (meow-motion-overwrite-define-key
   ;; Use e to move up, n to move down.
   ;; Since special modes usually use n to move down, we only overwrite e here.
   ;; '("e" . meow-next)
   ;; '("i" . meow-prev)
   '("<escape>" . ignore))
  (meow-leader-define-key
   '("?" . meow-cheatsheet)
   ;; To execute the originally e in MOTION state, use SPC e.
   ;; '("e" . "H-e")
   '("1" . meow-digit-argument)
   '("2" . meow-digit-argument)
   '("3" . meow-digit-argument)
   '("4" . meow-digit-argument)
   '("5" . meow-digit-argument)
   '("6" . meow-digit-argument)
   '("7" . meow-digit-argument)
   '("8" . meow-digit-argument)
   '("9" . meow-digit-argument)
   '("0" . meow-digit-argument))
  (meow-normal-define-key
   '("0" . meow-expand-0)
   '("1" . meow-expand-1)
   '("2" . meow-expand-2)
   '("3" . meow-expand-3)
   '("4" . meow-expand-4)
   '("5" . meow-expand-5)
   '("6" . meow-expand-6)
   '("7" . meow-expand-7)
   '("8" . meow-expand-8)
   '("9" . meow-expand-9)
   '("-" . negative-argument)
   '(";" . meow-comment)
   '("," . meow-inner-of-thing)
   '("." . meow-bounds-of-thing)
   '("[" . meow-beginning-of-thing)
   '("]" . meow-end-of-thing)
   '("{" . backward-paragraph)
   '("}" . forward-paragraph)
   '("/" . meow-visit)
   '("a" . meow-append)
   '("A" . meow-open-below)
   '("b" . meow-back-word)
   '("B" . meow-back-symbol)
   '("c" . meow-change)
   ;; '("C" . meow-comment)
   '("d" . meow-delete)
   '("D" . meow-backward-delete)
   ;; '("e" . meow-next)
   ;; '("E" . meow-next-expand)
   '("f" . meow-next-word)
   '("F" . meow-next-symbol)
   ;; '("f" . meow-find)
   '("g" . meow-cancel-selection)
   ;; '("G" . meow-grab)
   '("h" . er/expand-region)
   '("H" . meow-to-block)
   '("i" . meow-insert)
   '("I" . meow-open-above)
   '("j" . meow-join)
   '("J" . delete-indentation) ; hmmmmmmmmmmmmmmmmmmmm
   '("k" . meow-kill)
   '("K" . +lookup/documentation)
   '("l" . meow-line)
   '("L" . avy-goto-line)
   '("m" . meow-mark-word)
   '("M" . meow-mark-symbol)
   '("n" . meow-next)
   '("N" . meow-next-expand)
   '("o" . "C-c l")
   ;; '("o" . meow-right)
   ;; '("O" . meow-right-expand)
   '("p" . meow-prev)
   '("P" . meow-prev-expand)
   ;; '("q" . meow-ca)
   '("r" . meow-replace)
   '("R" . meow-replace-pop)
   '("s" . avy-goto-char-3)
   ;; '("S" . meow-open-above)
   '("t" . meow-till)
   ;; '("T" . avy-goto-char-2)
   '("u" . undo-fu-only-undo)
   '("U" . undo-fu-only-redo)
   ;; '("U" . meow-undo-in-selection)
   '("v" . meow-search)
   '("w" . meow-save)
   ;; '("W" . meow-next-symbol)
   ;; '("x" . avy-goto-char-2)
   '("x" . exchange-point-and-mark)
   '("X" . pop-global-mark)
   '("y" . meow-yank)
   '("Y" . meow-yank-pop)
   '("z" . meow-pop-selection)
   '(">" . my/indent)
   '("<" . my/indent)
   ;; '("Z" . meow-swap-grab)
   '("'" . consult-register-load)
   '("#" . consult-register-store)
   '("<escape>" . ignore))
  (meow-leader-define-key
   '("d" . "<f6> c")
   '("i" . "<f6> i")
   '("n" . "<f6> n")
   '("p" . "<f6> p")
   '("f" . "<f6> f")
   '("q" . "<f6> q")
   '("t" . "<f6> t")
   '("s" . "<f6> s")
   '("v" . "<f6> v")
   '("b" . "<f6> b")
   '("w" . ace-window)
   '("a" . ace-window)
   '("," . consult-buffer)
   '("SPC" . projectile-find-file)))

(require 'meow)
(meow-setup)
(meow-global-mode 1)

#+end_src

#+begin_src emacs-lisp
;; (setq
;;  meow-replace-state-name-list `((normal . "N")
;;                                 (motion . "M")
;;                                 (keypad . "K")
;;                                 (insert . "I")
;;                                 (beacon . "B")))
;; ;; (meow-leader-define-key '("b" . "<f6> b")) ???? where u at

(setq doom-leader-alt-key "<f6>")
(setq meow-expand-hint-remove-delay 2.5)
;; (map! :map meow-leader-keymap
(map! :map doom-leader-versioning-map "v" #'magit-status)
;;   "w" #'meow-keypad-start)
(setq doom-localleader-alt-key "<f7>")
;; (map! :map meow-leader-keymap
;;   "l" #'meow-keypad-start)
;; (defun meow--maybe-toggle-beacon-state () nil)

;; embrace-change
(map! :leader
      (:prefix ("b" . "buffers")
       :desc "Toggle narrowing"            "-"   #'doom/toggle-narrow-buffer
       (:when (modulep! :ui workspaces)
         :desc "Switch workspace buffer" "b" #'persp-switch-to-buffer
         :desc "Switch buffer"           "B" #'switch-to-buffer
         :desc "ibuffer workspace"       "I" #'+ibuffer/open-for-current-workspace)
       :desc "Clone buffer"                "c"   #'clone-indirect-buffer
       :desc "Clone buffer other window"   "C"   #'clone-indirect-buffer-other-window
       :desc "Format buffer"               "f" #'+format/buffer
       :desc "ibuffer"                     "i"   #'ibuffer
       :desc "Kill buffer"                 "k"   #'kill-current-buffer
       :desc "Kill all buffers"            "K"   #'doom/kill-all-buffers
       :desc "Switch to last buffer"       "l"   #'evil-switch-to-windows-last-buffer
       :desc "Set bookmark"                "m"   #'bookmark-set
       :desc "Delete bookmark"             "M"   #'bookmark-delete
       :desc "Next buffer"                 "n"   #'next-buffer
       :desc "Kill other buffers"          "O"   #'doom/kill-other-buffers
       :desc "Previous buffer"             "p"   #'previous-buffer
       :desc "Revert buffer"               "r"   #'revert-buffer
       :desc "Rename buffer"               "R"   #'rename-buffer
       :desc "Save buffer"                 "s"   #'basic-save-buffer
       :desc "Save buffer as root"         "u"   #'doom/sudo-save-buffer
       :desc "Pop up scratch buffer"       "x"   #'doom/open-scratch-buffer
       :desc "Switch to scratch buffer"    "X"   #'doom/switch-to-scratch-buffer
       :desc "Yank buffer"                 "y"   #'+default/yank-buffer-contents
       :desc "Bury buffer"                 "z"   #'bury-buffer
       :desc "Kill buried buffers"         "Z"   #'doom/kill-buried-buffers
       ))

(setq meow-use-clipboard t)
(map!
 "C-S-t"   #'+workspace/new
 "C-S-w"   #'+workspace/delete
 "C-<tab>" #'+workspace/cycle
 "C-S-<iso-lefttab>" (cmd! (+workspace/cycle -1))
 "M-1"   #'+workspace/switch-to-0
 "M-2"   #'+workspace/switch-to-1
 "M-3"   #'+workspace/switch-to-2
 "M-4"   #'+workspace/switch-to-3
 "M-5"   #'+workspace/switch-to-4
 "M-6"   #'+workspace/switch-to-5
 "M-7"   #'+workspace/switch-to-6
 "M-8"   #'+workspace/switch-to-7
 "M-9"   #'+workspace/switch-to-8
 "M-0"   #'+workspace/switch-to-final)

;; (map! :map doom-leader-)



(use-package embrace
  :config
  (map! "M-s c" #'embrace-change
        "M-s a" #'embrace-add
        "M-s d" #'embrace-delete))

(map! "C-," #'er/expand-region)


;; The fwollowing code will turn off corfu only when the edits are being applied
;; (add-hook 'macrursors-pre-finish-hook 'meow-global-mode)
;; (add-hook 'macrursors-post-finish-hook 'meow-global-mode)
#+end_src



#+begin_src emacs-lisp
(delete-selection-mode -1)

(after! meow
 (defun toggle-meow-during-macro ()
    (if (bound-and-true-p macrursors-mode)
        (meow-global-mode -1)
      (meow-global-mode 1)))

 (add-hook 'macrursors-mode-hook 'toggle-meow-during-macro)

 (defun meow--maybe-toggle-beacon-state ())
 (add-hook 'meow-insert-exit-hook #'corfu-quit))
#+end_src

#+begin_src emacs-lisp
(after! doom-modeline

  (doom-modeline-def-segment modals
   (when (bound-and-true-p meow-mode)
     (doom-modeline--modal-icon
      meow--indicator
      (cond
       ((meow-normal-mode-p) 'doom-modeline-evil-normal-state)
       ((meow-insert-mode-p) 'doom-modeline-evil-insert-state)
       ((meow-keypad-mode-p) 'doom-modeline-evil-visual-state)
       ((meow-motion-mode-p) 'doom-modeline-evil-operator-state)
       (t 'doom-modeline-evil-normal-state))
      meow--indicator
      (cond
       ((meow-normal-mode-p) "nf-md-alpha_n")
       ((meow-insert-mode-p) "nf-md-alpha_i")
       ((meow-keypad-mode-p) "nf-md-alpha_k")
       ((meow-motion-mode-p) "nf-md-alpha_m")
       (t "nf-md-alpha_n_circle"))
      (cond
       ((meow-normal-mode-p) "🅝")
       ((meow-insert-mode-p) "🅘")
       ((meow-motion-mode-p) "🅜")
       (t "🅝"))))))

#+end_src

#+begin_src emacs-lisp
(add-hook 'git-commit-setup-hook #'meow-insert-mode)

;; go to matching parens
;; magit status -> nothing?
#+end_src

*** indent similar to evil
#+begin_src emacs-lisp
(define-key indent-rigidly-map (kbd ">") #'indent-rigidly-right-to-tab-stop)
(define-key indent-rigidly-map (kbd "<") #'indent-rigidly-left-to-tab-stop)

(defun my/indent ()
  (interactive)
  (message "%s" (this-command-keys))
  (unless (region-active-p)
    (push-mark nil nil))
  (when (< (mark) (point))
    (exchange-point-and-mark))
  (beginning-of-line)
  (exchange-point-and-mark)
  (end-of-line)
  (call-interactively #'indent-rigidly)
  (if (equal (this-command-keys) "<")
    (call-interactively #'indent-rigidly-left-to-tab-stop)
    (call-interactively #'indent-rigidly-right-to-tab-stop)))
#+end_src

** macrursors
#+begin_src emacs-lisp
(use-package macrursors
  :config
  (dolist (mode '(corfu-mode goggles-mode beacon-mode))
    (add-hook 'macrursors-pre-finish-hook mode)
    (add-hook 'macrursors-post-finish-hook mode))
  (define-prefix-command 'macrursors-mark-map)
  ;; (global-set-key (kbd "C-c SPC") #'macrursors-select)
  (global-set-key (kbd "C->") #'macrursors-mark-next-instance-of)
  (global-set-key (kbd "C-<") #'macrursors-mark-previous-instance-of)
  (global-set-key (kbd "M-n") #'macrursors-mark-next-line)
  (global-set-key (kbd "M-p") #'macrursors-mark-previous-line)
  (global-set-key (kbd "C-;") 'macrursors-mark-map)
  (define-key macrursors-mark-map (kbd "C-;") #'macrursors-mark-all-lines-or-instances)
  (define-key macrursors-mark-map (kbd "SPC") #'macrursors-select)
  (define-key macrursors-mark-map (kbd ".") #'macrursors-mark-all-instances-of)
  (define-key macrursors-mark-map (kbd ";") #'macrursors-mark-all-lines-or-instances)
  (define-key macrursors-mark-map (kbd "l") #'macrursors-mark-all-lists)
  (define-key macrursors-mark-map (kbd "s") #'macrursors-mark-all-symbols)
  (define-key macrursors-mark-map (kbd "e") #'macrursors-mark-all-sexps)
  (define-key macrursors-mark-map (kbd "f") #'macrursors-mark-all-defuns)
  (define-key macrursors-mark-map (kbd "Q") #'macrursors-mark-all-sentences)
  (define-key macrursors-mark-map (kbd "r") #'macrursors-mark-all-lines))


;; (global-set-key (kbd "C-i") #'next-line)

(after! doom-modeline
 (defun doom-modeline--macrursors ()
  (when (bound-and-true-p macrursors-mode)
        (let ((cursors-curr (1+ (cl-count-if (lambda (p) (< p (point))) macrursors--overlays
                                            :key #'overlay-start)))
              (cursors-count (1+ (length macrursors--overlays)))
              (face 'doom-modeline-panel))
             (concat
                     (or (doom-modeline-icon 'mdicon "nf-md-multicast" "" "" :face face)
                         (propertize "I"
                                     'face `(:inherit ,face :height 1.4 :weight normal)
                                     'display '(raise -0.1)))
                     (propertize (doom-modeline-vspc)
                                 'face `(:inherit (variable-pitch ,face)))
                     (propertize (format "%d/%d " cursors-curr cursors-count) 'face face)))))

 (doom-modeline-def-segment matches
   "Displays matches.

Including:
1. the currently recording macro, 2. A current/total for the
current search term (with `anzu'), 3. The number of substitutions being
conducted with `evil-ex-substitute', and/or 4. The number of active `iedit'
regions, 5. The current/total for the highlight term (with `symbol-overlay'),
6. The number of active `multiple-cursors'."
   (let ((meta (concat (doom-modeline--macro-recording)
                       (doom-modeline--anzu)
                       (doom-modeline--phi-search)
                       (doom-modeline--evil-substitute)
                       (doom-modeline--iedit)
                       (doom-modeline--symbol-overlay)
                       (doom-modeline--multiple-cursors)
                       (doom-modeline--macrursors))))
     (or (and (not (string-empty-p meta)) meta)
         (doom-modeline--buffer-size)))))
#+end_src
** fancy tab-bar
#+begin_src emacs-lisp
(tab-bar-mode +1)

(setq tab-bar-tab-hints t
      tab-bar-close-button-show nil
      tab-bar-separator "  "
      tab-bar-auto-width nil)

(setq tab-bar-format '(hy/tab-bar-format-align-center tab-bar-format-tabs tab-bar-separator))
#+end_src

#+begin_src emacs-lisp
(custom-set-faces!
  '(tab-bar :family "Jost" :weight regular)
  `(tab-bar-tab :weight regular :background ,(face-attribute 'default :background) :box nil)
  '(tab-bar-tab-inactive :background nil :box nil)
  )
(defface tab-bar-hint '((t :weight bold)) "Tab bar face for number hint.")
(defface tab-bar-dir `((t :slant italic :family "hylosevka" :foreground ,(face-attribute 'shadow :foreground))) "Tab bar face for default/project-directory")
#+end_src

#+begin_src emacs-lisp
(map! :map magit-mode-map
      "<tab>" #'magit-section-cycle
      "C-<tab>" nil
      "M-1" nil
      "M-2" nil
      "M-3" nil
      "M-4" nil)
(map!
 "C-<tab>" #'tab-next
 "C-S-<iso-lefttab>" #'tab-previous
 "C-S-t" #'tab-new
 "C-S-w" #'tab-close
 "M-1" (cmd! (tab-bar-select-tab 1))
 "M-2" (cmd! (tab-bar-select-tab 2))
 "M-3" (cmd! (tab-bar-select-tab 3))
 "M-4" (cmd! (tab-bar-select-tab 4))
 "M-5" (cmd! (tab-bar-select-tab 5))
 "M-6" (cmd! (tab-bar-select-tab 6))
 "M-7" (cmd! (tab-bar-select-tab 7))
 "M-8" (cmd! (tab-bar-select-tab 8))
 "M-9" (cmd! (tab-bar-select-tab 9))
 "M-0" (cmd! (tab-bar-select-tab 10)))
#+end_src

#+begin_src emacs-lisp
(defun hy/tab-bar-format-align-center ()
  "Align the rest of tab bar items centered."
  (let* ((rest (cdr (memq 'hy/tab-bar-format-align-center tab-bar-format)))
         (rest (tab-bar-format-list rest))
         (rest (mapconcat (lambda (item) (nth 2 item)) rest  ""))
         (hpos (progn
                 (add-face-text-property 0 (length rest) 'tab-bar t rest)
                 (string-pixel-width rest)))
         (hpos (+ hpos (/ (- (frame-inner-width) hpos) 2)))
         (str (propertize "​" 'display
                          ;; The `right' spec doesn't work on TTY frames
                          ;; when windows are split horizontally (bug#59620)
                          (if (window-system)
                              `(space :align-to (- right (,hpos)))
                            `(space :align-to (,(- (frame-inner-width) hpos)))))))
    `((align-center menu-item ,str ignore))))

(setq tab-bar-tab-name-format-function #'hy/tab-bar-tab-name-format-default)
(defun hy/tab-bar-tab-name-format-default (tab i)
  (let* ((hint (format "%d" i))
         (name (alist-get 'name tab))
         (dir (concat "(" (alist-get 'dir tab "") ")"))
         (name-format (concat
                       " "
                       (propertize hint 'face 'tab-bar-hint)
                       name
                       " "
                       (propertize dir 'face 'tab-bar-dir)
                       " ")))
    (add-face-text-property
     0 (length name-format)
     (funcall tab-bar-tab-face-function tab)
     'append name-format)
    name-format))


(setq tab-bar-tab-name-function #'hy/tab-bar-tab-name-current)
(defun hy/tab-bar-tab-name-current ()
  (hy/shorten-string
   (buffer-name (window-buffer (or (minibuffer-selected-window)
                                   (and (window-minibuffer-p)
                                        (get-mru-window)))))
   25))

(add-hook 'doom-switch-buffer-hook #'hy/set-tab-dir)
(defun hy/set-tab-dir ()
  (setf (alist-get 'dir (cdr (tab-bar--current-tab-find)))
        (hy/tab-bar-dir)))

(defun hy/abbreviate-directory-path (path)
  "Turns `~/code/test/project` into `~/c/t/project`."
  (let* ((directories (seq-filter (lambda (s) (not (string= s ""))) (split-string path "/")))
         (last-dir (car (last directories)))
         (abbreviated-dirs (mapcar (lambda (dir)
                                     (if (string= dir last-dir)
                                         dir
                                       (substring dir 0 (if (string-prefix-p "." dir) 2 1))))
                                   directories)))
    (mapconcat 'identity abbreviated-dirs "/")))

(defun hy/tab-bar-dir ()
  (hy/shorten-string (hy/abbreviate-directory-path
                      (abbreviate-file-name
                       (or (projectile-project-root) default-directory)))
                     10
                     t))

(defun hy/shorten-string (string max-length &optional at-start)
  (let ((len (length string)))
    (if (> len max-length)
        (if at-start
            (concat  "…" (substring string (- len max-length) len))
          (concat (substring string 0 max-length) "…"))
      string)))
#+end_src

** lsp-booster
#+begin_src emacs-lisp :tangle yes
 (defun lsp-booster--advice-json-parse (old-fn &rest args)
  "Try to parse bytecode instead of json."
  (or
   (when (equal (following-char) ?#)
     (let ((bytecode (read (current-buffer))))
       (when (byte-code-function-p bytecode)
         (funcall bytecode))))
   (apply old-fn args)))
(advice-add (if (progn (require 'json)
                       (fboundp 'json-parse-buffer))
                'json-parse-buffer
              'json-read)
            :around
            #'lsp-booster--advice-json-parse)

(defun lsp-booster--advice-final-command (old-fn cmd &optional test?)
  "Prepend emacs-lsp-booster command to lsp CMD."
  (let ((orig-result (funcall old-fn cmd test?)))
    (if (and (not test?)                             ;; for check lsp-server-present?
             (not (file-remote-p default-directory)) ;; see lsp-resolve-final-command, it would add extra shell wrapper
             lsp-use-plists
             (not (functionp 'json-rpc-connection))  ;; native json-rpc
             (executable-find "emacs-lsp-booster"))
        (progn
          (message "Using emacs-lsp-booster for %s!" orig-result)
          (cons "emacs-lsp-booster" orig-result))
      orig-result)))
(advice-add 'lsp-resolve-final-command :around #'lsp-booster--advice-final-command)
#+end_src
** session restore
#+begin_src emacs-lisp
(defadvice! restore-no-confirm-session-quickload-a (_)
   "Restore the no confirm quickload of workspace sessions"
   :override #'doom/quickload-session
   (message "Restoring session...")
   (doom-load-session)
   (message "Session restored. Welcome back."))

(setq +doom-dashboard-menu-sections '(("Reload last session" :icon
  (nerd-icons-octicon "nf-oct-history" :face 'doom-dashboard-menu-title)
  :when
  (cond
   ((modulep! :ui workspaces)
    (file-exists-p
     (expand-file-name persp-auto-save-fname persp-save-dir)))
   ((require 'desktop nil t)
    (file-exists-p
     (desktop-full-file-name))))
  :action doom/quickload-session)
 ("Recently opened files" :icon
  (nerd-icons-faicon "nf-fa-file_text" :face 'doom-dashboard-menu-title)
  :action recentf-open-files)
 ("Open org-agenda" :icon
  (nerd-icons-octicon "nf-oct-calendar" :face 'doom-dashboard-menu-title)
  :when
  (fboundp 'org-agenda)
  :action org-agenda)
 ("Open project" :icon
  (nerd-icons-octicon "nf-oct-briefcase" :face 'doom-dashboard-menu-title)
  :action projectile-switch-project)
 ("Jump to bookmark" :icon
  (nerd-icons-octicon "nf-oct-bookmark" :face 'doom-dashboard-menu-title)
  :action bookmark-jump)
 ("Open private configuration" :icon
  (nerd-icons-octicon "nf-oct-tools" :face 'doom-dashboard-menu-title)
  :when
  (file-directory-p doom-user-dir)
  :action doom/open-private-config)
 ("Open documentation" :icon
  (nerd-icons-octicon "nf-oct-book" :face 'doom-dashboard-menu-title)
  :action doom/help)))
#+end_src
** work config
#+begin_src emacs-lisp
(load! "work.el" nil t)
(setq js-indent-level 2)

(after! apheleia
 (setf (alist-get 'prettier-json apheleia-formatters)
      '(npx "prettier" "--stdin-filepath" filepath "--parser=json"))

 (add-to-list 'apheleia-formatters '(alejandra "alejandra"))
 (setf (alist-get 'nix-mode apheleia-mode-alist) 'alejandra)
 )

#+end_src
** yuck
#+begin_src emacs-lisp
(after! apheleia
(use-package! yuck-mode
  :hook (yuck-mode . parinfer-rust-mode)
  :config (add-to-list 'apheleia-mode-alist '(yuck-mode . lisp-indent)))
)

(add-to-list 'auto-mode-alist '("\\.yuck\\'" . yuck-mode))
#+end_src
** idris
#+begin_src emacs-lisp
(use-package! idris2-mode
  :custom
  (idris2-stay-in-current-window-on-compiler-error t))
;; (use-package! idris-mode
;;   :custom
;;   (idris-interpreter-path "idris2"))

#+end_src
** archive :ARCHIVE:
#+begin_src emacs-lisp

(setq! bibtex-completion-bibliography '("~/code/misc/elitonom/docs/mono.bib"))
(setq! citar-bibliography '("~/code/misc/elitonom/docs/mono.bib"))
#+end_src

*** olivetti

#+begin_src emacs-lisp
;; (use-package! olivetti
;;   :custom (olivetti-body-width 100)
;;           (olivetti-style 'fancy))
;; (map! :after olivetti :leader "t o" #'olivetti-mode)
;; (add-hook 'text-mode-hook 'olivetti-mode)
;; (add-hook 'prog-mode-hook 'olivetti-mode)
;; ;; (add-hook 'special-mode-hook 'olivetti-mode)

;; ;; (custom-set-faces! `(olivetti-fringe :background ,(doom-color 'grey)))
;; (custom-set-faces! `(olivetti-fringe :inherit solaire-default-face))


;; (after! (olivetti persp-mode)
;;         (defvar persp-olivetti-buffers-backup nil)
;;         (add-hook 'persp-before-deactivate-functions
;;                 #'(lambda (fow))
;;                 (dolist (b (mapcar #'window-buffer
;;                                         (window-list (selected-frame)
;;                                                 'no-minibuf)))
;;                         (with-current-buffer b)
;;                         (when (eq 'olivetti-split-window-sensibly
;;                                 split-window-preferred-function))
;;                         (push b persp-olivetti-buffers-backup)
;;                         (remove-hook 'window-configuration-change-hook
;;                                         #'olivetti-set-environment t)
;;                         (setq-local split-window-preferred-function nil)
;;                         (olivetti-reset-all-windows)))
;;         (add-hook 'persp-activated-functions
;;                 #'(lambda (fow))
;;                 (dolist (b persp-olivetti-buffers-backup)
;;                         (with-current-buffer b)
;;                         (setq-local split-window-preferred-function
;;                                 'olivetti-split-window-sensibly)
;;                         (add-hook 'window-configuration-change-hook
;;                                 #'olivetti-set-environment nil t))
;;                 (setq persp-olivetti-buffers-backup nil)))
#+end_src
*** writeroom
#+begin_src emacs-lisp
;; (require 'writeroom-mode)
;; (global-writeroom-mode +1)


;; (setq writeroom-global-effects nil)
;; (setq writeroom-maximize-window nil)
;; (setq writeroom-mode-line t)
;; (setq writeroom-width 100)
;; (setq writeroom-major-modes '(text-mode prog-mode special-mode))
#+end_src
*** darkman
#+begin_src emacs-lisp
(let ((output (shell-command-to-string "darkman get")))
  (if (string= (string-trim-right output) "light")
      (load-theme 'ef-spring t)
    (load-theme 'doom-rouge t)))
#+end_src
*** gptel

#+begin_src emacs-lisp
(after! gptel
  (defun my/gptel-api-key-from-auth-source (&optional host user)
    "Lookup api key in the auth source.
By default, \"openai.com\" is used as HOST and \"apikey\" as USER."
    (if-let ((secret (plist-get (car (auth-source-search
                                      :max 1
                                      :host (or host "openai.com")
                                      :user (or user "apikey")))
                                :secret)))
        (if (functionp secret) (funcall secret) secret)
      (user-error "No `gptel-api-key' found in the auth source")))
  (setq gptel-api-key #'my/gptel-api-key-from-auth-source))

#+end_src
*** flymake
#+begin_src emacs-lisp

(use-package flymake
  :defer t
  :init
  ;; as flymakes fail silently there is no need to activate it on a per major mode basis
  (add-hook! (prog-mode text-mode) #'flymake-mode)
  :config
  (setq flymake-fringe-indicator-position 'right-fringe))

(use-package flymake-popon
  :hook (flymake-mode . flymake-popon-mode)
  :config
  (setq flymake-popon-method (if (modulep! :checkers syntax +childframe)
                                 'postframe
                               'popon)))
;; (use-package! flymake-vale
;;   :hook ((text-mode       . flymake-vale-load)
;;          ;; is this needed? prob not, eh
;;          (org-mode        . flymake-vale-load)
;;          (markdown-mode   . flymake-vale-load)
;;          (message-mode    . flymake-vale-load)))

;; gives support for org msg if you use that
;; (add-hook! 'org-msg-mode-hook
;;   (setq flymake-vale-file-ext ".org")
;;   (flymake-vale-load))

#+end_src
*** singularity
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.recipe$" . singularity-mode))
#+end_src
*** dofiles bench
#+begin_src emacs-lisp :tangle yes
(defun my/magit-process-environment (env)
  "Detect and set git -bare repo env vars when in tracked dotfile directories."
  (let* ((default (file-name-as-directory (expand-file-name default-directory)))
         (git-dir (expand-file-name "~/.dotfiles/"))
         (work-tree (expand-file-name "~/"))
         (dotfile-dirs
          (-map (apply-partially 'concat work-tree)
                (-uniq (-keep #'file-name-directory (split-string (shell-command-to-string
                                                                                                                      (format "/usr/bin/git --git-dir=%s --work-tree=%s ls-tree --full-tree --name-only -r HEAD"
                                                                                                                              git-dir work-tree))))))))
    (push work-tree dotfile-dirs)
    (when (member default dotfile-dirs)
      (push (format "GIT_WORK_TREE=%s" work-tree) env)
      (push (format "GIT_DIR=%s" git-dir) env)))
  env)

(advice-add 'magit-process-environment
            :filter-return #'my/magit-process-environment)
#+end_src
*** follow file links with position

#+begin_src emacs-lisp
(after! link-hint
  (link-hint-define-type 'file-link
    :next #'link-hint--next-file-link
    :at-point-p #'ffap-file-at-point
    ;; TODO consider making file links opt-in (use :vars)
    :not-vars '(org-mode Info-mode)
    :open #'hylo/find-file-at-point-with-pos
    :copy #'kill-new))

(defun hylo/find-file-at-point-with-pos ()
"goto line and column number of file at point, for example
~/woop.el:202:13. useful for link-hint-open-link"
;; (interactive)
(save-match-data
  (let* ((line-content (buffer-substring-no-properties (line-beginning-position) (line-end-position)))
         (matched (string-match ":\\([0-9]+\\):?\\([0-9]*\\)" line-content))
         (line-number (and matched
                           (match-string 1 line-content)
                           (string-to-number (match-string 1 line-content))))
         (col-number (and matched
                          (match-string 2 line-content)
                          (string-to-number (match-string 2 line-content))))
         (filename (ffap-guesser)))
    (when (boundp 'hy/current-frame)
      (select-frame-set-input-focus hy/current-frame))
    (when (boundp 'hy/current-window)
      (select-window hy/current-window))
    (find-file filename)
    (when line-number
      (goto-char (point-min))
      (forward-line (- line-number 1)))
    (when (> col-number 0)
      (move-to-column (- col-number 1))))))




(defun hylo/find-file-with-pos-here ()
  (interactive)
  (let ((hy/current-frame (selected-frame))
        (hy/current-window (selected-window)))
    (link-hint-open-link)))

(map! :leader :prefix "s"  (:desc "hi" "t" #'hylo/find-file-with-pos-here))


(defun touch-file ()
  "Force modification of current file, unless already modified."
  (interactive)
  (if (and (verify-visited-file-modtime (current-buffer))
           (not (buffer-modified-p)))
      (progn
        (set-buffer-modified-p t)
        (save-buffer 0))))

;; FORCE_COLOR=true node_modules/.bin/vitest | sed -E "s#(\w+/)+(\w+\.)+\w+:[0-9]+:[0-9]+#$(dirs)/&#g"
;;λ FORCE_COLOR=true node_modules/.bin/vitest | sed -E "s#(src/|test/)#$(pwd)/&#g"
#+end_src
*** affe
#+begin_src emacs-lisp
;; (after! projectile
;;   (defun hy/affe-find-in-project ()
;;     (interactive)
;;     (let ((affe-find-command "rg --color=never --files --hidden --ignore --glob \"!.git\"")
;;           (project-root (projectile-project-root)))
;;       (funcall-interactively #'affe-find project-root))
;;     (run-hooks 'projectile-find-file-hook)))

;;   ;; (map! :leader "SPC" #'hy/affe-find-in-project))


;; (map! :leader
;;       :desc "FuZzily find File in home"
;;       "f z f" (cmd!! #'affe-find "~/"))
;; (map! :leader
;;       :desc "FuZzily find file in this Dir"
;;       "f z d" (cmd!! #'affe-find))




#+end_src
*** eldoc
#+begin_src emacs-lisp

(after! eldoc
  (delete #'eldoc-display-in-echo-area eldoc-display-functions))

#+end_src
*** apheleia formatting

#+begin_src emacs-lisp
(setq +format-with-lsp nil)

(setq-hook! 'haskell-mode-hook +format-with 'fourmolu)
(after! apheleia
  (push '(fourmolu . ("fourmolu" "--stdin-input-file" (or (buffer-file-name) (buffer-name))))
        apheleia-formatters))

;; (use-package! apheleia
;;   :config
;;   (apheleia-global-mode +1)
;;   (push '(scheme-mode . lisp-indent) apheleia-mode-alist))

#+end_src
*** tempel
#+begin_src emacs-lisp


(use-package tempel
  ;; Require trigger prefix before template name when completing.
  ;; :custom
  ;; (tempel-trigger-prefix "<")

  :bind (("M-t" . tempel-complete) ;; Alternative tempel-expand
         ("C-M-t" . tempel-insert)
         )

  :init

  ;; Setup completion at point
  (defun tempel-setup-capf ()
    ;; Add the Tempel Capf to `completion-at-point-functions'.
    ;; `tempel-expand' only triggers on exact matches. Alternatively use
    ;; `tempel-complete' if you want to see all matches, but then you
    ;; should also configure `tempel-trigger-prefix', such that Tempel
    ;; does not trigger too often when you don't expect it. NOTE: We add
    ;; `tempel-expand' *before* the main programming mode Capf, such
    ;; that it will be tried first.
    (after! lsp-mode
      (setq-local completion-at-point-functions
                  (cons #'tempel-expand
                        completion-at-point-functions))))

  (add-hook 'prog-mode-hook 'tempel-setup-capf)
  (add-hook 'text-mode-hook 'tempel-setup-capf)

  ;; Optionally make the Tempel templates available to Abbrev,
  ;; either locally or globally. `expand-abbrev' is bound to C-x '.
  ;; (add-hook 'prog-mode-hook #'tempel-abbrev-mode)
  ;; (global-tempel-abbrev-mode)

  (map! :map tempel-map
        "<tab>" #'tempel-next
        "<backtab>" #'tempel-previous
        "C-<tab>" #'tempel-next
        "C-S-<tab>" #'tempel-previous ;???
        "M-<right>" #'tempel-next
        "M-<left>" #'tempel-previous)

  :custom
  (tempel-path (concat doom-user-dir "templates"))
  )


(when (modulep! :completion corfu)
  (map! :map corfu-map
        (:prefix "C-x"
                 "C-t" #'tempel-complete)))

(defadvice! hy/tempel-insert-evil-insert (&rest _)
  "always go to evil insert mode after inserting a template"
  :after #'tempel-insert
  (evil-insert 0))
(defadvice! hy/tempel-complete-evil-insert (&rest _)
  "always go to evil insert mode after inserting a template"
  :after #'tempel-complete
  (evil-insert 0))

(defadvice! hy/tempel-complete-trim-newline-in-region (&rest _)
  "trim a trailing newline in the region to make inserting the
region into a snippet more streamlined"
  :before #'tempel-complete
  (remove-trailing-whitespace-in-region))

(defadvice! hy/tempel-insert-trim-newline-in-region (&rest _)
  "trim a trailing newline in the region to make inserting the
region into a snippet more streamlined"
  :before #'tempel-insert
  (remove-trailing-whitespace-in-region))


(defun remove-trailing-whitespace-in-region ()
  (when (use-region-p)
    (when (> (mark) (point)) (exchange-point-and-mark))
    (when (looking-at "\n")
      (re-search-backward "[^\n]+"))
    (goto-char (1+ (point)))))



(defun hy/eh ()
  (interactive)
  (message (format "\"%s\"" (buffer-substring-no-properties (point) (mark)))))
#+end_src

**** TODO how to check if region exists? region-active-p doesn't work

**** TODO trim region before insert, so that `V M-t` works
**** TODO after tempel-insert -> insert mode

*** rotate text

#+begin_src emacs-lisp
(after! rotate-text
  (add-to-list 'rotate-text-words '("false" "true")))
#+end_src
*** tailwind
#+begin_src


(use-package! lsp-tailwindcss
  :init
  (setq lsp-tailwindcss-add-on-mode t)
  :config)
#+end_src
*** exercism
#+begin_src emacs-lisp
(use-package! exercism-modern
  :commands (exercism-modern-jump exercism-modern-view-tracks))
#+end_src
*** no idea
#+begin_src emacs-lisp


(setq find-file-visit-truename nil)
(setq find-file-existing-other-name nil)
;; (defun my/todo-org-is-unreal (buf)
;;       (string= (buffer-name buf) "todo.org"))
;; (push #'my/todo-org-is-unreal doom-unreal-buffer-functions)


(setq iedit-toggle-key-default nil)


;;(use-package! prism :config (prism-set-colors :colors (-map #'doom-color '(red orange yellow green blue violet))))

#+end_src
*** evil

#+begin_src emacs-lisp

(map! :map org-mode-map :v "$" #'evil-end-of-line)

(setq evil-disable-insert-mode-bindings t)
(setq evil-ex-substitute-global t)

(setq evil-v$-excludes-newline t)

(defadvice! hy/center-line-after-search (&rest _)
   :after #'evil-ex-search-next
  :after #'evil-ex-search-previous
  (evil-scroll-line-to-center nil))

(map! :after evil :nv "'" #'evil-goto-mark)

(setq evil-visual-update-x-selection-p t)
(setq evil-cross-lines t)
(setq evil-want-minibuffer t)
#+end_src

**** evil snipe
#+begin_src emacs-lisp
;; (map!
;;  :after (evil-snipe evil)
;;                     :m "," #'evil-snipe-repeat)
;; (setq evil-snipe-override-evil-repeat-keys nil)

(after! evil-snipe
  ;; (when evil-snipe-override-evil-repeat-keys
  (define-key evil-snipe-parent-transient-map "," nil)
  ;; (define-key evil-snipe-parent-transient-map "," #'evil-snipe-repeat)
  ;; (define-key evil-snipe-parent-transient-map ";" #'evil-snipe-repeat-reverse)

  (evil-define-key* '(motion normal) evil-snipe-local-mode-map
                    "S" nil
                    "," nil)
  ;; "," 'evil-snipe-repeat
  ;; ";" 'evil-snipe-repeat-reverse)

  (evil-define-key* '(normal) evil-snipe-override-local-mode-map
                    "," nil))
;; "," 'evil-snipe-repeat
;; ";" 'evil-snipe-repeat-reverse)





(setq evil-snipe-scope 'whole-buffer)

;; (after! evil
;;   (define-key evil-motion-state-map (kbd "RET") nil))


#+end_src

**** evil relative in normal, absolute in insert
#+begin_src emacs-lisp

(add-hook 'evil-normal-state-entry-hook
          (cmd! (when (doom-real-buffer-p (current-buffer))
                  (let (message-log-max)
                    (with-temp-message (or (current-message) "")
                      (menu-bar--display-line-numbers-mode-relative))))))

(add-hook 'evil-insert-state-entry-hook
          (cmd! (let (message-log-max)
                  (with-temp-message (or (current-message) "")
                    (menu-bar--display-line-numbers-mode-absolute)))))
#+end_src

*** mail

#+begin_src emacs-lisp

;; (defadvice! go-to-workspace-if-exists-mu4e (fun)
;;   "Go back to the mu4e workspace if it exists, otherwise launch mu4e normally."
;;   :around #'=mu4e
;;   (run-at-time nil nil (lambda () (if (+workspace-get +mu4e-workspace-name t)
;;                                       (+workspace-switch +mu4e-workspace-name)
;;                                     (funcall fun))))
;;   (ignore-errors (abort-recursive-edit)))


;; (after! mu4e
;;   (setq sendmail-program (executable-find "msmtp")
;;         send-mail-function #'smtpmail-send-it
;;         message-sendmail-f-is-evil t
;;         message-sendmail-extra-arguments '("--read-envelope-from")
;;         message-send-mail-function #'message-send-mail-with-sendmail))

;; (after! mu4e-alert
;;   (setq +mu4e-alert-bell-cmd nil))
;; (setq mu4e-context-policy 'ask-if-none
;;       mu4e-compose-context-policy 'always-ask)


(defadvice! evil-delete-char-default-to-black-hole-a (fn beg end &optional type register)
  "Advise `evil-delete-char' to set default REGISTER to the black hole register."
  :around #'evil-delete-char
  (unless register (setq register ?_))
  (funcall fn beg end type register))

(defadvice! hy/evil-scroll-advice (fn count)
  :around #'evil-scroll-down
  :around #'evil-scroll-up
  (setq count (/ (window-body-height) 4))
  (funcall fn count))

(map! :after evil-collection :niv "C-y" #'yank)



;; (use-package! cape-yasnippet
;;   :after cape
;;   :init
;;   (add-to-list 'completion-at-point-functions #'cape-yasnippet)
;;   (after! lsp-mode
;;     (add-hook 'lsp-managed-mode-hook #'cape-yasnippet--lsp))
;;   (after! eglot
;;     (add-hook 'eglot-managed-mode-hook #'cape-yasnippet--eglot)))



;; (use-package!)
;; (after! vterm
;;   (set-popup-rule! "^\\*vterm" :size 0.15 :side 'right :vslot -4 :select t :quit nil :ttl 0 ))
;;

#+end_src
*** modeline
#+begin_src emacs-lisp
;; (setq doom-modeline-modal-icon nil)

;; (advice-add #'doom-modeline-segment--modals :override #'ignore)

#+end_src
*** magit

#+begin_src emacs-lisp
(map! :map magit-status-mode-map
      "<escape>" #'+magit/quit)
#+end_src
*** evil stuff
#+begin_src emacs-lisp

;; (map! :n "C-a" #'evil-numbers/inc-at-pt-incremental)
;; (map! :n "C-x" #'evil-numbers/inc-at-pt-incremental)
;; 10


;; (map! :after evil :v "i" #'evil-forward-char)
(setq evil-want-fine-undo t)

(setq! evil-disable-insert-state-bindings t)
(setq +evil-want-o/O-to-continue-comments nil)

(setq which-key-allow-multiple-replacements t)
(after! which-key
  (pushnew!
   which-key-replacement-alist
   '(("" . "\\`+?evil[-:/]?\\(?:a-\\)?\\(.*\\)") . (nil . "ຯ\\1"))
   '(("\\`g s" . "\\`evilem--?motion-\\(.*\\)") . (nil . "ຯ\\1"))))


(map! :v "u" #'undo
      :v "C-r" #'undo-redo)

(map! :leader
      "," #'consult-buffer
      ">" #'+vertico/switch-workspace-buffer
      "g p" #'magit-push
      "R" #'+popup/raise
      "|" #'+popup/raise)

(defun insert-primary ()
  (interactive)
  (insert-for-yank (gui-get-primary-selection)))

;; (map! :nv "s" #'avy-goto-char-2)

(map! :niv "<269025133>" #'insert-primary)

(map! :map evil-window-map
      "n" #'evil-window-left
      "r" #'evil-window-down
      "t" #'evil-window-up
      "d" #'evil-window-right

      "S-n" #'+evil/window-move-left
      "S-r" #'+evil/window-move-down
      "S-t" #'+evil/window-move-up
      "S-d" #'+evil/window-move-right

      ;; "n" #'evil-window-new
      ;; "r" #'evil-window-rotate-downwards
      ;; "R" #'evil-window-rotate-upwards
      ;; "t" #'evil-window-top-left
      ;; "T" #'tear-off-window
      ;; "k" #'+workspace/close-window-or-workspace

      "k" #'evil-window-delete

      "v" #'+evil/window-vsplit-and-follow
      "V" #'evil-window-vsplit
      "h" #'+evil/window-split-and-follow
      "H" #'evil-window-split
      "C-h" nil
      "j" nil
      "J" nil
      "C-j" nil
      "k" nil
      "K" nil
      "C-k" nil
      "l" nil
      "L" nil
      "C-l" nil
      "s" nil
      "S" nil
      "C-s" nil)

(map! :leader "TAB p" #'+workspace/other)

(map! :n [mouse-8] #'better-jumper-jump-backward
      :n [mouse-9] #'better-jumper-jump-forward)


(map! :i "C-u" #'universal-argument)

(map! :map minibuffer-local-map "C-u" #'universal-argument)


;; (map! "C-s" #'save-buffer)
;; (map! :leader "f s" nil)
(map! :map minibuffer-local-map doom-leader-alt-key #'doom/leader)


#+end_src
*** dired

#+begin_src emacs-lisp

(setq dired-dwim-target t)
#+end_src
*** company

#+begin_src emacs-lisp

(after! company
  (add-hook! 'evil-normal-state-entry-hook
    (defun +company-abort-h ()
      ;; HACK `company-abort' doesn't no-op if company isn't active; causing
      ;;      unwanted side-effects, like the suppression of messages in the
      ;;      echo-area.
      ;; REVIEW Revisit this to refactor; shouldn't be necessary!
      (when company-candidates
        (company-abort))))

  ;; (setq company-idle-delay nil)
  )

(after! company-box
  (push '(tab-bar-lines . 0) company-box-frame-parameters)
  (push '(tab-bar-lines-keep-state . 0) company-box-frame-parameters)
  (push '(tab-bar-format . nil) company-box-frame-parameters))

;; ^ together with tab-bar-lines . 0
#+end_src
*** embark

#+begin_src emacs-lisp
(map! :map embark-file-map "f" #'hy/find-file-in-fair-split)

(defun hy/find-file-in-fair-split (file) (interactive "FFile: ")
       (hylo/split-window-fair-and-follow)
       (find-file file))

#+end_src
*** helpful

#+begin_src emacs-lisp
;; (defun my/info-buffer-p (buf)
;;   (string= (buffer-name buf) "*info*"))
;; (push 'my/info-buffer-p doom-real-buffer-functions)

;; (defun my/helpful-buffer-p (buf)
;;   (string-prefix-p "*helpful" (buffer-name buf)))
;; (push 'my/helpful-buffer-p doom-real-buffer-functions)


;; (map! :map helpful-mode-map :n
;;       ;; "K" #'+popup/raise
;;       "<ESC>" #'+popup/quit-window)

;; (defun my/search-info-org ()
;;   (interactive)
;;   (info "org")
;;   (+popup/raise (selected-window))
;;   (+default/search-buffer))
;; (defun my/search-info-elisp ()
;;   (interactive)
;;   (info "elisp")
;;   (+popup/raise (selected-window))
;;   (+default/search-buffer))
;; (defun my/search-emacsd ()
;;   (interactive)
;;   (+vertico/project-search t nil "~/.emacs.d"))
;; (map! :leader :prefix "s"
;;       ;; "e" #'my/search-emacsd
;;       "E" #'my/search-info-elisp
;;       "n" #'my/search-info-org)


#+end_src
*** bib
#+begin_src emacs-lisp
#+end_src
