(defpoll outputs :initial "[]" :interval "3600s" "swaymsg -t get_outputs | jq --unbuffered '.[] .name' | jq -sc --unbuffered")

(deflisten workspaces :initial "[[],[],[],[]]" "scripts/workspaces")
(deflisten current-output :initial '{"name":"DP-2"}' "scripts/output-name")

(defwidget workspace-widget [spaces]
           (box
            :space-evenly false
            :valign "fill"
            :class "workspaces-wrapper"
            :orientation "v"
            (for workspace in spaces
                 (button
                  :onclick "swaymsg workspace number ${workspace.name}"
                  :valign "center"
                  :class "workspace-wrapper ${workspace.visible ? 'visible' : ''} ${workspace.focused ? 'focused' : ''} ${workspace.urgent ? 'urgent' : ''}"
                  (label :text {workspace.name})))))

(defpoll battery :initial '{}' :interval "300s" "scripts/battery")
(defwidget bat []
           (box
            :visible {battery.supported && battery.capacity < 90}
            :class "my-1"
            (label :text {battery.icon}
                   :tooltip "${battery.capacity}%, Remaining: ${battery.time}")))

(deflisten lrhand-status :initial 'disabled' `scripts/lrhanded.sh`)
(defwidget lrhand [output]
           (eventbox :class "mt-2" :onclick "scripts/lrhanded.sh toggle" (label :text {lrhand-status == "disabled" ? "R" : "L"})))

(deflisten volume-status :initial '{"source":0,"sink":0}' "scripts/volume.clj")
(defvar sink-expanded false)
(defwidget volume []
           (box :orientation "v"
                :space-evenly false
                :visible {!volume-status.error}
                (eventbox :onhover {volume-status.sink > 0 ? 'scripts/sink-expand-toggle.sh true 0 &' : ''}
                          :onhoverlost "scripts/sink-expand-toggle.sh false 1 &"
                          (box :orientation "v"
                               :space-evenly false
                               (revealer :reveal {sink-expanded && volume-status.sink > 0}
                                         :transition "slidedown"
                                         :duration "400ms"
                                         (scale :min 0
                                                :max 101
                                                :orientation "v"
                                                :class "mb-2"
                                                :flipped true
                                                :value {volume-status.sink}
                                                :onchange "./scripts/volume.clj @DEFAULT_AUDIO_SINK@ {}"))
                               (eventbox :onclick "wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle"
                                         :class "volume-sink"
                                         (label :class {volume-status.sink > 0 ? 'unmuted' : 'muted'}
                                                :text {volume-status.bt ? '󰂯' : volume-status.sink > 0 ? '󰕾' : '󰖁'}))))

                (eventbox :class "mt-2"
                          :visible {volume-status.source_is_mic}
                          :onclick "wpctl set-mute @DEFAULT_AUDIO_SOURCE@ toggle"
                          (label :class {volume-status.source > 0 ? 'unmuted' : 'muted'}
                                 :text {volume-status.source > 0 ? '󰍬' : '󰍭'}))))


(defpoll date-weekday :interval "5s" "date '+%a'")
; (defpoll date-year :interval "5s" "date '+%y'")
; (defpoll date-month :interval "5s" "date '+%m'")
; (defpoll date-day :interval "5s" "date '+%d'")
(defpoll date-ymd :interval "5s" "date '+%Y ⋅ %B ⋅ %d'")
(defpoll date-hour :interval "5s" "date '+%H'")
(defpoll date-minute :interval "5s" "date '+%M'")
(defwidget clock []
           (box :orientation "v"
                :space-evenly false
                ; (label :text date-year :class "-mb-2")
                ; (label :text date-month :class "-mb-2")
                ; (label :text date-day :class "mb-2")
                (label :text date-ymd :angle -90 :class "mb-4 mt-2")
                (label :text date-weekday :angle -90 :class "mb-2")
                (label :text date-hour :class "-mb-2")
                (label :text date-minute)))


(defpoll temperature :initial "0.0" :interval "600s" "scripts/weather.clj")
(defwidget weather []
           (label :class "my-2" :text temperature :angle -90))


; (defpoll ethernet-p :interval "600s" "nmcli con show --active | grep ethernet")
; (deflisten azk-state "~/azk/show_azk.sh")
; (defwidget azk [output]
;            (button :visible {(output == 'DP-2' && hostname == 'day' ? true : false) && (ethernet-p != "")}
;                    :class "my-2 azk ${azk-state.state}"
;                    :onclick "~/azk/azk.py stamp"))

; (defpoll hostname :initial "" :interval "24h" `hostnamectl hostname`)
; (defpoll vpn-p :interval "600s" "pgrep openconnect; true")
; (defwidget vpn [output]
;            (button :visible {output == 'DP-2' && hostname == 'day' ? true : false}
;                    :class "my-2 vpn ${vpn-p != '' ? 'active' : ''}"
;                    :onclick "~/token/toggle.sh &"))


(defwidget left [index]
           (workspace-widget
            :spaces {workspaces[index]}))

(defwidget center []
           (box))

(defwidget right [output]
           (box
            :space-evenly false
            :valign "end"
            :orientation "v"
            ; (azk :output output)
            ; (vpn :output output)
            (volume)
            (lrhand :output output)
            (menu-toggle :output output)
            (systray :class "mt-2 mb-1"
                     :orientation "v"
                     :icon-size 16
                     :spacing 10
                     )
            (bat)
            (weather)
            (clock)))

(defwidget sidebar [index output]
           (eventbox
            :onclick "swaymsg focus output ${output}"
            :onscroll "swaymsg focus output ${output} && \
                       [ {} = up ] && swaymsg workspace prev_on_output; \
                       [ {} = down ] && swaymsg workspace next_on_output"
            (centerbox
             :orientation "v"
             :class "${output} ${current-output.name == output ? 'focused' : ''}"
             (left
              :index index)
             (center)
             (right :output output))))

(defwidget menu-toggle [output]
           (eventbox :class "mt-2" :onclick "swaymsg focus output ${output} && eww open-many --toggle menu-0 menu-1 menu-2" (label :text "󰍜")))

(defwidget menu [output]
           (box
            :visible {output == current-output.name}
            :class "menu"
            :orientation "v"
            (button :class "button"
                    :onclick "scripts/menu.clj rofi"
                    :timeout "20000ms"
                    (label :text "󰌧"))
            (button :class "button"
                    :onclick "scripts/menu.clj zoom ${output}"
                    (label :text "󰍉"))
            (button :class "button"
                    :onclick "scripts/menu.clj gamma"
                    (label :text "󰖔"))
            (button :class "button"
                    :onclick "scripts/menu.clj keyboard"
                    (label :text "󰌌"))
            (button :class "button"
                    :onclick "scripts/menu.clj light-monitor"
                    (label :text "󱉓"))
            (button :class "button"
                    :onclick "scripts/menu.clj light-eingang"
                    (label :text "󰌵"))
            )
                      )

(defwindow menu-0
           :monitor 0
           :stacking "overlay"
           :geometry (geometry :anchor "bottom right"
                               :y "138px"
                               :x "0px")
           (menu :output {outputs[0]}))

(defwindow menu-1
           :monitor 1
           :stacking "overlay"
           :geometry (geometry :anchor "bottom right"
                               :y "138px"
                               :x "0px")

           (menu :output {outputs[1]}))

(defwindow menu-2
           :monitor 2
           :stacking "overlay"
           :geometry (geometry :anchor "bottom right"
                               :y "138px"
                               :x "0px")
           (menu :output {outputs[2]}))

(defwindow bar [index output height]
           :monitor {index}
           :geometry (geometry :x "0%"
                               :y "0%"
                               :height {height}
                               :anchor "center right")
           :stacking "fg"
           :exclusive true
           (sidebar :index {index} :output {output}))
