colorscheme modus-vivendi

nop %sh{
    mkdir -p "$kak_config/autoload"
    ln -sfn "$kak_runtime/rc" "$kak_config/autoload/standard-library"
}

# mkdir -p $HOME/.config/kak/bundle/
# git clone https://codeberg.org/jdugan6240/kak-bundle $HOME/.config/kak/bundle/kak-bundle

source "%val{config}/bundle/kak-bundle/rc/kak-bundle.kak"
bundle-noload kak-bundle https://codeberg.org/jdugan6240/kak-bundle
bundle swiper.kak https://git.sr.ht/~hadronized/swiper.kak
bundle kakoune-focus https://github.com/caksoylar/kakoune-focus.git
# :bundle-install

# install kakoune-lsp
# cargo install kak-tree-sitter
# cargo install ktsctl
# cargo install hop-kak

evaluate-commands %sh{
  for f in `fd '\.kak$' ${kak_config} --exclude autoload --exclude colors --exclude bundle`; do
  	echo "source $f"
  done
}
# add-highlighter global/show-whitespaces show-whitespaces -tab ' ' -spc ' ' -indent '▏' -lf '↩'
add-highlighter global/ wrap -marker '↪'

set global indentwidth 2
set global tabstop 2
set global scrolloff 5,0
# HACK: fix for wezterm; it doesn’t support synchronized output very well for
# now: <https://github.com/wez/wezterm/issues/4607>
set global ui_options terminal_assistant=none terminal_synchronized=false

# Better :grep!
set-option global grepcmd 'rg --column --smart-case --sort path'

map global normal <C-q> :quit<ret>

# Git support
# map global user g ':enter-user-mode git<ret>' -docstring 'git mode'
# set-option global awk_cmd %sh{
#   test "$(uname)" = "Darwin" && echo 'gawk' || echo 'awk'
# }

## Some specific filetypes I see at work / spare-time
# hook global WinCreate .*\.bzl %{ set-option buffer filetype python }
# hook global WinCreate .*\.zprofile %{ set-option buffer filetype sh }
# hook global WinCreate .*\.(bazel|bzl) %{ set-option buffer filetype python }
# hook global WinCreate .*\.nu %{ set-option buffer filetype nu }


hook global InsertCompletionShow .* %{ map window insert <tab> <c-n>; map window insert <s-tab> <c-p> }
hook global InsertCompletionHide .* %{ unmap window insert <tab> <c-n>; unmap window insert <s-tab> <c-p> }
map global normal '#' :comment-line<ret>

set-face global CurWord +u

hook global NormalIdle .* %{
    eval -draft %{ try %{
        exec ,<a-i>w
        add-highlighter -override global/curword regex "[^\w](\Q%val{selection}\E)[^\w]" 1:CurWord
    } catch %{
        add-highlighter -override global/curword group
    } }
}


define-command -override search-doc -params 1 %{
  prompt -menu search: -shell-script-candidates "rg --smart-case --no-heading --line-number ""%arg{1}"" %val{runtime}/doc" %{
      edit -existing %sh{ echo $kak_text | cut -d: -f1 } %sh{ echo $kak_text | cut -d: -f2 }

		#### somehow evaluate-commands on %val{text}?
    # evaluate-commands -save-regs fl %{
    #   execute-keys -draft 'ghT:"fy2lT:"ly'
    #   edit -existing %reg{f} $reg{l}
    # }
  }
}

map global user ? :search-doc<space>

define-command eval-selection %{ eval %val{selection} }
map global user e :eval-selection<ret>

## Some pickers
define-command -hidden open_buffer_picker %{
  prompt buffer: -menu -buffer-completion %{
    buffer %val{text}
  }
}

define-command -hidden open_file_picker %{
  prompt file: -menu -shell-script-candidates 'fd --type=file' %{
    edit -existing %val{text}
  }
}

define-command file-picker %{
  try %{
    edit -scratch '*file-picker*'

    map buffer normal <ret> 'x_gf'
    add-highlighter buffer/file-picker-item regex (.*) 1:cyan
    set-option buffer swiper_callback 'x_gf'

    execute-keys '|fd --type=file<ret>gg'
  }
}

# Modeline
declare-option str bufname_abbrev

define-command -hidden update-bufname-abbrev %{
  set-option window bufname_abbrev %sh{
    if (( ${#kak_bufname} > $((kak_window_width / 3)) )); then
      sed "s:\([^/]\)[^/]*/:\1/:g" <<< $kak_bufname
    else
      echo $kak_bufname
    fi
  }
}

hook global -group bufname-abbrev WinDisplay .* update-bufname-abbrev
hook global -group bufname-abbrev WinResize .* update-bufname-abbrev

set-option global modelinefmt '{DiagnosticError} %opt{lsp_diagnostic_error_count} {DiagnosticWarning} %opt{lsp_diagnostic_warning_count} {DiagnosticInfo} %opt{lsp_diagnostic_info_count} {DiagnosticHint} %opt{lsp_diagnostic_hint_count} {Swiper}%opt{modeline_swiper}{StatusLine}%opt{bufname_abbrev} {green}%val{cursor_line}:%val{cursor_char_column} {blue}(%val{buf_line_count}L){{context_info}} {{mode_info}}'

define-command -hidden update-window-title %{
  set-option global ui_options %sh{
    # git root or pwd
    project_dir=`git rev-parse --show-toplevel 2&>/dev/null || pwd`
    # <last_dir>/<filename> if bufname is path, otherwise bufname
    short_bufname=`grep -Eo '[^/]+/[^/]+$' <<< $kak_bufname || echo $kak_bufname`
    home_as_tilde="s#^$HOME#~#"
    # ~/.config/kak/colors => ~/.c/k/colors
    shortened_path="s#(\.?[^/])[^/]+/#\1/#g"
    short_project_dir=`sed -E -e $home_as_tilde -e $shortened_path <<< $project_dir`
    printf "terminal_title=%s (%s)" "$short_bufname" "$short_project_dir"
  }
}

hook global -group window-title WinDisplay .* update-window-title

# notes
# set-face global notes_review "%opt{orange}"
# set-face global notes_tag "%opt{mauve}+u"

# faces / colorschemes
## inlay hints (type annotations, etc.)

# set-face global MenuForeground "black,%opt{mauve}"
# set-face global MenuInfo "%opt{green},black"
# set-face global Information "%opt{orange},default"
# set-face global StatusLine "%opt{mauve},rgb:1e2030"
# set-face global StatusLineMode "%opt{green}"
# set-face global StatusLineInfo "%opt{teal}"
# set-face global StatusLineValue "%opt{orange}"
# set-face global StatusCursor "black,%opt{mauve}"
# set-face global Prompt "%opt{orange}"
# set-face global InlayHint black+i
# set-face global InlayCodeLens comment
# set-face global DiagnosticInfo "%opt{blue}"
# set-face global DiagnosticHint "%opt{mauve}"
# set-face global DiagnosticWarning "%opt{orange}"
# set-face global DiagnosticError "%opt{red}"

# keybindings

## anchor / cursor
map global user <space> '<a-;>' -docstring 'swap anchor & cursor'

## insert mode C-w
map global insert <c-w> '<esc>:execute-keys bd<ret>i'
map global insert <c-a> '<esc>:execute-keys gh<ret>i'
map global insert <c-e> '<esc>:execute-keys gl<ret>i'
map global normal X %{<a-:>F<ret>x} -docstring 'extend lines downwards' 
map global normal <a-X> %{<a-:><a-;><a-H>Kx} -docstring 'extend lines upwards' 
map global normal / /(?i)
map global normal n nvv
# doesnt work
# map global normal <c-*> <a-i>w*
map global prompt <c-p> <S-tab>
map global prompt <c-n> <tab>
# map global prompt <space> '<a-;>: eval -save-regs a %{ set-register a " "; exec <lt>c-r<gt>a }<ret>'
# map -docstring "backspace" global prompt "<backspace>" "<left><del>"
## convenience
map global user $ ':e -existing ~/.config/kak/kakrc<ret>:cd ~/.config/kak<ret>' -docstring 'edit Kakoune configuration'
map global user S ':swiper<ret>'                          -docstring 'swiper'
map global user s ':swiper-reduce<ret>'                   -docstring 'swiper reduce'

## buffers
declare-user-mode user-buffer
map global user b ':enter-user-mode user-buffer<ret>' -docstring 'buffers'
map global user-buffer b ':open_buffer_picker<ret>'   -docstring 'pick buffer'
map global user-buffer d ':db<ret>'                   -docstring 'delete buffer'
map global user-buffer D ':db!<ret>'                  -docstring 'force-delete buffer'

map global user / ':grep '                   -docstring 'grep'
declare-user-mode user-file
map global user f ':enter-user-mode user-file<ret>' -docstring 'files'
map global user-file f ':open_file_picker<ret>'     -docstring 'pick file'
map global user-file r ':recentf<ret>'              -docstring 'recent files'
map global user-file s ':write<ret>'                -docstring 'save file'

## match
map global normal M ':enter-user-mode match-extend<ret>' -docstring 'match mode (extend)'
map global normal m ':enter-user-mode match<ret>'        -docstring 'match mode'

## window management
map global user w ':enter-user-mode window-wezterm<ret>' -docstring 'window mode'

## LSP
declare-user-mode user-lsp
map global user l ':enter-user-mode user-lsp<ret>'      -docstring 'lsp mode'
map global user-lsp a ':lsp-code-actions<ret>'          -docstring 'code action'
map global user-lsp c ':lsp-code-lens<ret>'             -docstring 'execute code lens'
map global user-lsp d ':lsp-diagnostics<ret>'           -docstring 'list diagnostics'
map global user-lsp h ':lsp-highlight-references<ret>'  -docstring 'highlight references'
map global user-lsp I ':lsp-implementation<ret>'        -docstring 'list implementations'
map global user-lsp i ':lsp-incoming-calls<ret>'        -docstring 'incoming calls'
map global user-lsp K ':lsp-hover-buffer<ret>'          -docstring 'hover in a dedicated buffer'
map global user-lsp k ':lsp-hover<ret>'                 -docstring 'hover'
map global user-lsp l ':lsp-code-lens<ret>'             -docstring 'run a code lens'
map global user-lsp ) ':lsp-next-function<ret>'         -docstring 'jump to the next function'
map global user-lsp ( ':lsp-previous-function<ret>'     -docstring 'jump to the previous function'
map global user-lsp o ':lsp-outgoing-calls<ret>'        -docstring 'outgoing calls'
map global user-lsp p ':lsp-workspace-symbol-incr<ret>' -docstring 'pick workspace symbol'
map global user-lsp P ':lsp-workspace-symbol<ret>'      -docstring 'list workspace symbols'
map global user-lsp r ':lsp-references<ret>'            -docstring 'list references'
map global user-lsp R ':lsp-rename-prompt<ret>'         -docstring 'rename'
map global user-lsp S ':lsp-document-symbol<ret>'       -docstring 'list workspace symbols'
map global user-lsp s ':lsp-goto-document-symbol<ret>'  -docstring 'pick document symbol'
map global user-lsp x ':lsp-find-error<ret>'            -docstring 'jump to the prev/next error'
map global user n ':enter-user-mode notes<ret>'         -docstring 'notes'

map global normal \' '"'
map global insert <c-s> '<esc>:w<ret>i'
map global normal <c-s> ':w<ret>'
map global normal <c-a-s> '<c-s>'

## bookmarks
map global user _ ':enter-user-mode bookmarks<ret>' -docstring 'bookmarks'

# comment
map global user c ':comment-line<ret>' -docstring 'comment line'

# tree-sitter
map global user t ':enter-user-mode tree-sitter<ret>' -docstring 'tree-sitter'

# # experiment around ! and buffer-based interactive shells
# define-command -override run -shell-completion -params .. -docstring 'run command' %{
#   # this is not strictly needed on every run, but it’s easier for this experiment
#   set-option buffer filetype sh
#   execute-keys -draft "gjo# %sh{date} %sh{pwd}<ret>"
#   execute-keys -draft "gji# %arg{@}<ret>"
#   execute-keys "gj!%arg{@}<ret>"
# }

